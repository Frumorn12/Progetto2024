import { InjectionToken, Input, Output, EventEmitter, Directive, Optional, Inject, } from '@angular/core';
import { mkenum } from './utils';
import * as i0 from "@angular/core";
/**
 * Defines the possible values of the components' display density.
 */
export const DisplayDensity = mkenum({
    comfortable: 'comfortable',
    cosy: 'cosy',
    compact: 'compact',
});
/**
 * @deprecated since version 16.1.x.
 * Please use the `--ig-size` CSS custom property.
 * @see {@link [Update Guide](https://www.infragistics.com/products/ignite-ui-angular/angular/components/general/update-guide#from-160x-to-161x)}
 *
 * @hidden
 * Defines the DisplayDensity DI token.
 */
export const DisplayDensityToken = new InjectionToken('DisplayDensity');
/**
 * @hidden
 * Base class containing all logic required for implementing DisplayDensity.
 */
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class DisplayDensityBase {
    /**
     * @deprecated since version 16.1.x.
     * Please use the `--ig-size` CSS custom property.
     * @see {@link [Update Guide](https://www.infragistics.com/products/ignite-ui-angular/angular/components/general/update-guide#from-160x-to-161x)}
     *
     * Returns the theme of the component.
     * The default theme is `comfortable`.
     * Available options are `comfortable`, `cosy`, `compact`.
     * ```typescript
     * let componentTheme = this.component.displayDensity;
     * ```
     */
    get displayDensity() {
        switch (this.size) {
            case '1':
                return DisplayDensity.compact;
            case '2':
                return DisplayDensity.cosy;
            case '3':
            default:
                return (this._displayDensity ??
                    this.displayDensityOptions?.displayDensity ??
                    DisplayDensity.comfortable);
        }
    }
    /**
     * Sets the theme of the component.
     */
    set displayDensity(val) {
        const currentDisplayDensity = this._displayDensity;
        this._displayDensity = val;
        if (currentDisplayDensity !== this._displayDensity) {
            const densityChangedArgs = {
                oldDensity: currentDisplayDensity,
                newDensity: this._displayDensity,
            };
            this.densityChanged.emit(densityChangedArgs);
        }
    }
    get size() {
        return globalThis.document?.defaultView
            .getComputedStyle(this._host.nativeElement)
            .getPropertyValue('--ig-size')
            .trim();
    }
    constructor(displayDensityOptions, _host) {
        this.displayDensityOptions = displayDensityOptions;
        this._host = _host;
        this.densityChanged = new EventEmitter();
        this.oldDisplayDensityOptions = {
            displayDensity: DisplayDensity.comfortable,
        };
        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.initialDensity = this._displayDensity;
    }
    /** @hidden @internal **/
    ngDoCheck() {
        if (!this._displayDensity &&
            this.displayDensityOptions &&
            this.oldDisplayDensityOptions.displayDensity !==
                this.displayDensityOptions.displayDensity) {
            const densityChangedArgs = {
                oldDensity: this.oldDisplayDensityOptions.displayDensity,
                newDensity: this.displayDensityOptions.displayDensity,
            };
            this.densityChanged.emit(densityChangedArgs);
            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);
        }
    }
    /**
     * Given a style class of a component/element returns the modified version of it based
     * on the current display density.
     */
    getComponentDensityClass(baseStyleClass) {
        switch (this._displayDensity || this.oldDisplayDensityOptions.displayDensity) {
            case DisplayDensity.cosy:
                return `${baseStyleClass}--${DisplayDensity.cosy}`;
            case DisplayDensity.compact:
                return `${baseStyleClass}--${DisplayDensity.compact}`;
            default:
                return baseStyleClass;
        }
    }
    /**
     * Sets the `--component-size` CSS variable based on the value of Display Density
     */
    getComponentSizeStyles() {
        switch (this._displayDensity || this.oldDisplayDensityOptions.displayDensity) {
            case DisplayDensity.compact:
                return 'var(--ig-size, var(--ig-size-small))';
            case DisplayDensity.cosy:
                return 'var(--ig-size, var(--ig-size-medium))';
            case DisplayDensity.comfortable:
            default:
                return 'var(--ig-size, var(--ig-size-large))';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: DisplayDensityBase, deps: [{ token: DisplayDensityToken, optional: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.8", type: DisplayDensityBase, isStandalone: true, selector: "[igxDisplayDensityBase]", inputs: { displayDensity: "displayDensity" }, outputs: { densityChanged: "densityChanged" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: DisplayDensityBase, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxDisplayDensityBase]',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: i0.ElementRef }]; }, propDecorators: { densityChanged: [{
                type: Output
            }], displayDensity: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,