import { Component, ContentChild, EventEmitter, HostBinding, Input, Output, ViewChild } from '@angular/core';
import { IgxIconComponent } from '../icon/icon.component';
import { IgxButtonDirective } from '../directives/button/button.directive';
import { IgxRippleDirective } from '../directives/ripple/ripple.directive';
import { IgxBannerActionsDirective } from './banner.directives';
import { NgIf } from '@angular/common';
import { IgxExpansionPanelBodyComponent } from '../expansion-panel/expansion-panel-body.component';
import { IgxExpansionPanelComponent } from '../expansion-panel/expansion-panel.component';
import { CurrentResourceStrings } from '../core/i18n/resources';
import * as i0 from "@angular/core";
/**
 * **Ignite UI for Angular Banner** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)
 *
 * The Ignite UI Banner provides a highly template-able and easy to use banner that can be shown in your application.
 *
 * Usage:
 *
 * ```html
 * <igx-banner #banner>
 *   Our privacy settings have changed.
 *  <igx-banner-actions>
 *      <button type="button" igxButton="raised">Read More</button>
 *      <button type="button" igxButton="raised">Accept and Continue</button>
 *  </igx-banner-actions>
 * </igx-banner>
 * ```
 */
export class IgxBannerComponent {
    /** @hidden */
    get useDefaultTemplate() {
        return !this._bannerActionTemplate;
    }
    /**
     * Set the animation settings used by the banner open/close methods
     * ```typescript
     * import { slideInLeft, slideOutRight } from 'igniteui-angular';
     * ...
     * banner.animationSettings: ToggleAnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };
     * ```
     */
    set animationSettings(settings) {
        this._animationSettings = settings;
    }
    /**
     * Get the animation settings used by the banner open/close methods
     * ```typescript
     * let currentAnimations: ToggleAnimationSettings = banner.animationSettings
     * ```
     */
    get animationSettings() {
        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;
    }
    /**
 * Gets/Sets the resource strings.
 *
 * @remarks
 * By default it uses EN resources.
 */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    get resourceStrings() {
        if (!this._resourceStrings) {
            this._resourceStrings = CurrentResourceStrings.BannerResourceStrings;
        }
        return this._resourceStrings;
    }
    /**
     * Gets whether banner is collapsed
     *
     * ```typescript
     * const isCollapsed: boolean = banner.collapsed;
     * ```
     */
    get collapsed() {
        return this._expansionPanel.collapsed;
    }
    /**
     * Returns the native element of the banner component
     * ```typescript
     *  const myBannerElement: HTMLElement = banner.element;
     * ```
     */
    get element() {
        return this.elementRef.nativeElement;
    }
    /**
     * @hidden
     */
    get displayStyle() {
        return this.collapsed ? '' : 'block';
    }
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Fires after the banner shows up
         * ```typescript
         * public handleOpened(event) {
         *  ...
         * }
         * ```
         * ```html
         * <igx-banner (opened)="handleOpened($event)"></igx-banner>
         * ```
         */
        this.opened = new EventEmitter();
        /**
         * Fires before the banner shows up
         * ```typescript
         * public handleOpening(event) {
         *  ...
         * }
         * ```
         * ```html
         * <igx-banner (opening)="handleOpening($event)"></igx-banner>
         * ```
         */
        this.opening = new EventEmitter();
        /**
         * Fires after the banner hides
         * ```typescript
         * public handleClosed(event) {
         *  ...
         * }
         * ```
         * ```html
         * <igx-banner (closed)="handleClosed($event)"></igx-banner>
         * ```
         */
        this.closed = new EventEmitter();
        /**
         * Fires before the banner hides
         * ```typescript
         * public handleClosing(event) {
         *  ...
         * }
         * ```
         * ```html
         * <igx-banner (closing)="handleClosing($event)"></igx-banner>
         * ```
         */
        this.closing = new EventEmitter();
        this.cssClass = 'igx-banner-host';
    }
    /**
     * Opens the banner
     *
     * ```typescript
     *  myBanner.open();
     * ```
     *
     * ```html
     * <igx-banner #banner>
     * ...
     * </igx-banner>
     * <button type="button" (click)="banner.open()">Open Banner</button>
     * ```
     */
    open(event) {
        this._bannerEvent = { banner: this, owner: this, event };
        const openingArgs = {
            banner: this,
            owner: this,
            event,
            cancel: false
        };
        this.opening.emit(openingArgs);
        if (openingArgs.cancel) {
            return;
        }
        this._expansionPanel.open(event);
    }
    /**
     * Closes the banner
     *
     * ```typescript
     *  myBanner.close();
     * ```
     *
     * ```html
     * <igx-banner #banner>
     * ...
     * </igx-banner>
     * <button type="button" (click)="banner.close()">Close Banner</button>
     * ```
     */
    close(event) {
        this._bannerEvent = { banner: this, owner: this, event };
        const closingArgs = {
            banner: this,
            owner: this,
            event,
            cancel: false
        };
        this.closing.emit(closingArgs);
        if (closingArgs.cancel) {
            return;
        }
        this._expansionPanel.close(event);
    }
    /**
     * Toggles the banner
     *
     * ```typescript
     *  myBanner.toggle();
     * ```
     *
     * ```html
     * <igx-banner #banner>
     * ...
     * </igx-banner>
     * <button type="button" (click)="banner.toggle()">Toggle Banner</button>
     * ```
     */
    toggle(event) {
        if (this.collapsed) {
            this.open(event);
        }
        else {
            this.close(event);
        }
    }
    /** @hidden */
    onExpansionPanelOpen() {
        this.opened.emit(this._bannerEvent);
    }
    /** @hidden */
    onExpansionPanelClose() {
        this.closed.emit(this._bannerEvent);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxBannerComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.8", type: IgxBannerComponent, isStandalone: true, selector: "igx-banner", inputs: { animationSettings: "animationSettings", resourceStrings: "resourceStrings" }, outputs: { opened: "opened", opening: "opening", closed: "closed", closing: "closing" }, host: { properties: { "class": "this.cssClass", "style.display": "this.displayStyle" } }, queries: [{ propertyName: "bannerIcon", first: true, predicate: IgxIconComponent, descendants: true }, { propertyName: "_bannerActionTemplate", first: true, predicate: IgxBannerActionsDirective, descendants: true }], viewQueries: [{ propertyName: "_expansionPanel", first: true, predicate: ["expansionPanel"], descendants: true, static: true }], ngImport: i0, template: "<igx-expansion-panel #expansionPanel [animationSettings]=\"animationSettings\" (contentCollapsed)=\"onExpansionPanelClose()\" (contentExpanded)=\"onExpansionPanelOpen()\"\n    [collapsed]=\"collapsed\" aria-live=\"polite\" [attr.aria-hidden]=\"collapsed\">\n    <igx-expansion-panel-body>\n        <div class=\"igx-banner\">\n            <div class=\"igx-banner__message\">\n                <div *ngIf=\"bannerIcon\" class=\"igx-banner__illustration\">\n                    <ng-content select=\"igx-icon\"></ng-content>\n                </div>\n                <span class=\"igx-banner__text\">\n                    <ng-content></ng-content>\n                </span>\n            </div>\n            <div class=\"igx-banner__actions\">\n                <ng-container *ngIf=\"useDefaultTemplate\">\n                    <button type=\"button\" igxButton=\"flat\" igxRipple (click)=\"close()\">\n                        {{ resourceStrings.igx_banner_button_dismiss }}\n                    </button>\n                </ng-container>\n                <ng-container *ngIf=\"!useDefaultTemplate\">\n                    <ng-content select=\"igx-banner-actions\"></ng-content>\n                </ng-container>\n            </div>\n        </div>\n    </igx-expansion-panel-body>\n</igx-expansion-panel>\n", dependencies: [{ kind: "component", type: IgxExpansionPanelComponent, selector: "igx-expansion-panel", inputs: ["animationSettings", "id", "collapsed"], outputs: ["collapsedChange", "contentCollapsing", "contentCollapsed", "contentExpanding", "contentExpanded"] }, { kind: "component", type: IgxExpansionPanelBodyComponent, selector: "igx-expansion-panel-body", inputs: ["role", "label", "labelledBy"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxBannerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-banner', standalone: true, imports: [IgxExpansionPanelComponent, IgxExpansionPanelBodyComponent, NgIf, IgxButtonDirective, IgxRippleDirective], template: "<igx-expansion-panel #expansionPanel [animationSettings]=\"animationSettings\" (contentCollapsed)=\"onExpansionPanelClose()\" (contentExpanded)=\"onExpansionPanelOpen()\"\n    [collapsed]=\"collapsed\" aria-live=\"polite\" [attr.aria-hidden]=\"collapsed\">\n    <igx-expansion-panel-body>\n        <div class=\"igx-banner\">\n            <div class=\"igx-banner__message\">\n                <div *ngIf=\"bannerIcon\" class=\"igx-banner__illustration\">\n                    <ng-content select=\"igx-icon\"></ng-content>\n                </div>\n                <span class=\"igx-banner__text\">\n                    <ng-content></ng-content>\n                </span>\n            </div>\n            <div class=\"igx-banner__actions\">\n                <ng-container *ngIf=\"useDefaultTemplate\">\n                    <button type=\"button\" igxButton=\"flat\" igxRipple (click)=\"close()\">\n                        {{ resourceStrings.igx_banner_button_dismiss }}\n                    </button>\n                </ng-container>\n                <ng-container *ngIf=\"!useDefaultTemplate\">\n                    <ng-content select=\"igx-banner-actions\"></ng-content>\n                </ng-container>\n            </div>\n        </div>\n    </igx-expansion-panel-body>\n</igx-expansion-panel>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { bannerIcon: [{
                type: ContentChild,
                args: [IgxIconComponent]
            }], opened: [{
                type: Output
            }], opening: [{
                type: Output
            }], closed: [{
                type: Output
            }], closing: [{
                type: Output
            }], animationSettings: [{
                type: Input
            }], resourceStrings: [{
                type: Input
            }], cssClass: [{
                type: HostBinding,
                args: ['class']
            }], displayStyle: [{
                type: HostBinding,
                args: ['style.display']
            }], _expansionPanel: [{
                type: ViewChild,
                args: ['expansionPanel', { static: true }]
            }], _bannerActionTemplate: [{
                type: ContentChild,
                args: [IgxBannerActionsDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,