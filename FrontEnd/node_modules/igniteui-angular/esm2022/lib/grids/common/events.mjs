export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../../../../projects/igniteui-angular/src/lib/grids/common/events.ts"],"names":[],"mappings":"","sourcesContent":["import { IBaseEventArgs, CancelableEventArgs } from '../../core/utils';\nimport { GridKeydownTargetType } from './enums';\nimport { CellType, ColumnType, GridType, RowType } from './grid.interface';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxBaseExporter } from '../../services/exporter-common/base-export-service';\nimport { IgxExporterOptionsBase } from '../../services/exporter-common/exporter-options-base';\nimport { ISortingExpression } from '../../data-operations/sorting-strategy';\nimport { IBaseSearchInfo } from '../../directives/text-highlight/text-highlight.directive';\n\n/** The event arguments when data from a grid is being copied. */\nexport interface IGridClipboardEvent {\n    /** `data` can be of any type and referes to the data that is being copied/stored to the clipboard */\n    data: any[];\n    /** \n     * `cancel` returns whether an external event has interepted the copying \n     * If the value becomes \"true\", it returns/exits from the method, instanciating the interface\n     */\n    cancel: boolean;\n}\n\n/** Represents an event argument related to grid cell interactions. */\nexport interface IGridCellEventArgs extends IBaseEventArgs {\n    /** Represents the grid cell that triggered the event. */\n    cell: CellType;\n    /** \n     * Represents the original event that occured\n     * Examples of such events include: selecting, clicking, double clicking, etc.\n     */\n    event: Event;\n}\n\n/** Represents event arguments related to grid editing completion. */\nexport interface IGridEditDoneEventArgs extends IBaseEventArgs {\n    rowID: any; // deprecated\n    primaryKey: any    // in a major version, remove the deprecated `rowID` and migrate to `key`\n    /** `cellID` is optional; specifies the cell the editing is being done on. */\n    cellID?: {\n        rowID: any;\n        columnID: any;\n        rowIndex: number;\n    };\n    /**\n     * `rowData` represents the updated/committed data of the row after the edit (newValue)\n     * The only case rowData (of the current object) is used directly, is when there is no rowEditing or transactions enabled\n     */\n    rowData: any;\n    /** \n     * Represents the previous (before editing) value of the edited cell. \n     * It's used when the event has been stoped/exited.\n     */\n    oldValue: any;\n    /**\n     * Optional\n     * Represents the value, that is being entered in the edited cell\n     * When there is no `newValue` and the event has ended, the value of the cell returns to the `oldValue`\n     */\n    newValue?: any;\n    /** \n     * Optional\n     * Represents the original event, that has triggered the edit \n     */\n    event?: Event;\n    /** \n     * Optional\n     * Represents the column information of the edited cell \n     */\n    column?: ColumnType;\n    /**\n     * Optional\n     * Represents the grid instance that owns the edit event.\n     */\n    owner?: GridType;\n    /**\n     * Optional\n     * Indicates if the editing cosists of adding a new row\n     */\n    isAddRow?: boolean;\n    /** \n     * Optional\n     * Indicates if the new value would be valid. \n     * It can be set to return the result of the methods for validation of the grid \n     */\n    valid?: boolean;\n}\n\n/** \n * Represents event arguments related to grid editing.\n * The event is cancelable\n * It contains information about the row and the column, as well as the old and nwe value of the element/cell\n */\nexport interface IGridEditEventArgs extends CancelableEventArgs, IGridEditDoneEventArgs {\n}\n\n/**\n * The event arguments after a column's pin state is changed.\n * `insertAtIndex`specifies at which index in the pinned/unpinned area the column was inserted.\n * `isPinned` returns the actual pin state of the column after the operation completed.\n */\nexport interface IPinColumnEventArgs extends IBaseEventArgs {\n    column: ColumnType;\n    /**\n     * If pinned, specifies at which index in the pinned area the column is inserted.\n     * If unpinned, specifies at which index in the unpinned area the column is inserted.\n     */\n    insertAtIndex: number;\n    /**\n     * Returns the actual pin state of the column.\n     * If pinning/unpinning is succesfull, value of `isPinned` will change accordingly when read in the \"-ing\" and \"-ed\" event.\n     */\n    isPinned: boolean;\n}\n\n/**\n * The event arguments before a column's pin state is changed.\n * `insertAtIndex`specifies at which index in the pinned/unpinned area the column is inserted.\n * Can be changed in the `columnPin` event.\n * `isPinned` returns the actual pin state of the column. When pinning/unpinning is succesfull,\n * the value of `isPinned` will change accordingly when read in the \"-ing\" and \"-ed\" event.\n */\nexport interface IPinColumnCancellableEventArgs extends IPinColumnEventArgs, CancelableEventArgs {\n}\n\n/** \n * Represents event arguments related to events, that can occur for rows in a grid \n * Example for events: adding, deleting, selection, transaction, etc.\n */\nexport interface IRowDataEventArgs extends IBaseEventArgs {\n    data: any;\n    /** \n     * Represents the unique key, the row can be associated with. \n     * Available if `primaryKey` exists\n     */\n    primaryKey: any;\n    /** Represents the grid instance that owns the edit event. */\n    owner: GridType;\n}\n\n/** The event arguments when a column is being resized */\nexport interface IColumnResizeEventArgs extends IBaseEventArgs {\n    /** Represents the informantion of the column that is being resized */\n    column: ColumnType;\n    /** Represents the old width of the column before the resizing */\n    prevWidth: string;\n    /** Represents the new width, the column is being resized to */\n    newWidth: string;\n}\n\n/** \n * The event arguments when a column is being resized \n * It contains information about the column, it's old and new width\n * The event can be canceled\n */\nexport interface IColumnResizingEventArgs extends IColumnResizeEventArgs, CancelableEventArgs {\n}\n\n/** \n * The event arguments when the selection state of a row is being changed \n * The event is cancelable\n */\nexport interface IRowSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /** Represents an array of rows, that have already been selected */\n    readonly oldSelection: any[];\n    /** Represents the newly selected rows */\n    newSelection: any[];\n    /** \n     * Represents an array of all added rows\n     * Whenever a row has been selected, the array is \"refreshed\" with the selected rows\n     */\n    readonly added: any[];\n    /** \n     * Represents an array of all rows, removed from the selection\n     * Whenever a row has been deselected, the array is \"refreshed\" with the rows, \n     * that have been previously selected, but are no longer\n     */\n    readonly removed: any[];\n    /** \n     * Represents the original event, that has triggered the selection change\n     * selecting, deselecting\n     */\n    readonly event?: Event;\n    /** Indicates whether or not all rows of the grid have been selected */\n    readonly allRowsSelected?: boolean;\n}\n\n/** \n * The event arguments when the selection state of a column is being chaged \n * The event is cancelable\n */\nexport interface IColumnSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /** Represents an array of columns, that have already been selected */\n    readonly oldSelection: string[];\n    /** Represents the newly selected columns */\n    newSelection: string[];\n    /** \n     * Represents an array of all added columns\n     * Whenever a column has been selected, the array is \"refreshed\" with the selected columns\n     */\n    readonly added: string[];\n    /** \n     * Represents an array of all columns, removed from the selection\n     * Whenever a column has been deselected, the array is \"refreshed\" with the columns, that have been previously selected, but are no longer\n     */\n    readonly removed: string[];\n    /** \n     * Represents the original event, that has triggered the selection change\n     * selecting, deselecting\n     */\n    readonly event?: Event;\n}\n\nexport interface ISearchInfo extends IBaseSearchInfo {\n    matchInfoCache: any[];\n    activeMatchIndex: number;\n}\n\n/**\n * Represents the arguments for the grid toolbar export event.\n * It provides information about the grid instance, exporter service, export options, \n * and allows the event to be canceled.\n */\nexport interface IGridToolbarExportEventArgs extends IBaseEventArgs {\n    /** `grid` represents a reference to the instance of the grid te event originated from */\n    grid: GridType;\n    /** \n     * The `exporter` is a base service.\n     * The type (an abstract class `IgxBaseExporter`) has it's own properties and methods\n     * It is used to define the format and options of the export, the exported element \n     * and methods for preparing the data from the elements for exporting\n     */\n    exporter: IgxBaseExporter;\n    /**\n     * Represents the different settings, that can be given to an export\n     * The type (an abstract class `IgxExporterOptionsBase`) has properties for column settings \n     * (whether they should be ignored) as well as method for generating a file name\n     */\n    options: IgxExporterOptionsBase;\n    /** \n     * `cancel` returns whether the event has been interepted and stopped\n     * If the value becomes \"true\", it returns/exits from the method, instanciating the interface \n     */\n    cancel: boolean;\n}\n\n/** Represents event arguments related to the start of a column moving operation in a grid. */\nexport interface IColumnMovingStartEventArgs extends IBaseEventArgs {\n    /**\n     * Represents the column that is being moved.\n     * The `ColumnType` contains the informatoin (the grid it belongs to, css data, settings, etc.) of the column in its properties\n     */\n    source: ColumnType;\n}\n\n/** Represents event arguments related to a column moving operation in a grid */\nexport interface IColumnMovingEventArgs extends IBaseEventArgs {\n    /**\n     * Represents the column that is being moved.\n     * The `ColumnType` contains the informatoin (the grid it belongs to, css data, settings, etc.) of the column in its properties\n     */\n    source: ColumnType;\n    /** \n     * `cancel` returns whether the event has been interepted and stopped\n     * If the value becomes \"true\", it returns/exits from the method, instanciating the interface \n     */\n    cancel: boolean;\n}\n\n/** Represents event arguments related to the end of a column moving operation in a grid */\nexport interface IColumnMovingEndEventArgs extends IBaseEventArgs {\n    /**\n     * The source of the event represents the column that is being moved.\n     * The `ColumnType` contains the informatoin (the grid it belongs to, css data, settings, etc.) of the column in its properties\n     */\n    source: ColumnType;\n    /**\n     * The target of the event represents the column, the source is being moved to.\n     * The `ColumnType` contains the informatoin (the grid it belongs to, css data, settings, etc.) of the column in its properties\n     */\n    target: ColumnType;\n    /** \n     * `cancel` returns whether the event has been interepted and stopped\n     * If the value becomes \"true\", it returns/exits from the method, instanciating the interface \n     */\n    cancel: boolean;\n}\n\n/** \n * Represents an event, emitted when keydown is triggered over element inside grid's body \n * This event is fired only if the key combination is supported in the grid.\n */\nexport interface IGridKeydownEventArgs extends IBaseEventArgs {\n    /** The `targetType` represents the type of the targeted object. For example a cell or a row */\n    targetType: GridKeydownTargetType;\n    /** Represents the information and details of the object itself */\n    target: any;\n    /** Represents the original event, that occured. */\n    event: Event;\n    /** \n     * The event is cancelable\n     * `cancel` returns whether the event has been interepted and stopped\n     * If the value becomes \"true\", it returns/exits from the method, instanciating the interface \n     */\n    cancel: boolean;\n}\n\n/** The event is triggered when getting the current position of a certain cell */\nexport interface ICellPosition {\n    /** It returns the position (index) of the row, the cell is in */\n    rowIndex: number;\n    /** \n     * It returns the position (index) of the colunm, the cell is in \n     * Counts only the visible (non hidden) columns \n     */\n    visibleColumnIndex: number;\n}\n\n/** Emitted when a dragging operation is finished (when the row is dropped) */\nexport interface IRowDragEndEventArgs extends IBaseEventArgs {\n    /** Represents the drag directive or information associated with the drag operation */\n    dragDirective: any;\n    /** Represents the information of the row that is being dragged. */\n    dragData: RowType;\n    /** Represents the HTML element itself */\n    dragElement: HTMLElement;\n    /** `animation` returns whether the event is animated */\n    animation: boolean;\n}\n\n/** \n * Emitted when a dragging operation is starting (when the row is \"picked\") \n * The event is cancelable\n */\nexport interface IRowDragStartEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /** Represents the drag directive or information associated with the drag operation */\n    dragDirective: any;\n    /** Represents the information of the row that is being dragged. */\n    dragData: RowType;\n    /** Represents the HTML element itself */\n    dragElement: HTMLElement;\n}\n\n/** Рepresents event arguments related to the row's expansion state being changed in a grid */\nexport interface IRowToggleEventArgs extends IBaseEventArgs {\n    /** Represents the ID of the row that emitted the event (which state is changed) */\n    rowID: any;\n    /** \n     * Returns the state of the row after the operation has ended\n     * Indicating whether the row is being expanded (true) or collapsed (false)\n     */\n    expanded: boolean;\n    /** \n     * Optional\n     * Represents the original event, that has triggered the expantion/collapse \n     */\n    event?: Event;\n    /** \n     * The event is cancelable\n     * `cancel` returns whether the event has been interepted and stopped\n     * If the value becomes \"true\", it returns/exits from the method, instanciating the interface \n     */\n    cancel: boolean;\n}\n\n/**\n * Event emitted when a row's pin state changes.\n * The event is cancelable\n */\nexport interface IPinRowEventArgs extends IBaseEventArgs, CancelableEventArgs {\n    /**\n     * The ID of the row, that was pinned/unpinned.\n     *   ID is either the primaryKey value or the data record instance.\n     */\n    readonly rowID: any;\n    row?: RowType;\n    /** The index at which to pin the row in the pinned rows collection. */\n    insertAtIndex?: number;\n    /** Whether or not the row is pinned or unpinned. */\n    readonly isPinned: boolean;\n}\n\n/**\n * Event emitted when a grid is scrolled.\n */\nexport interface IGridScrollEventArgs extends IBaseEventArgs {\n    /** The scroll direction - vertical or horizontal. */\n    direction: string;\n    /** The original browser scroll event. */\n    event: Event;\n    /** The new scroll position */\n    scrollPosition: number;\n}\n\n/**\n * Event emitted when a checkbox in the checkbox\n * list of an IgxColumnActions component is clicked.\n */\nexport interface IColumnToggledEventArgs extends IBaseEventArgs {\n    /** The column that is toggled. */\n    column: ColumnType;\n    /** The checked state after the action. */\n    checked: boolean;\n}\n\n/** Emmited when the active node is changed */\nexport interface IActiveNodeChangeEventArgs extends IBaseEventArgs {\n    /** Represents the row index of the active node */\n    row: number;\n    /** Represents the column index of the active node */\n    column: number;\n    /**\n     * Optional \n     * Represents the hierarchical level of the active node \n     */\n    level?: number;\n    /** \n     * Represents the type of the active node. \n     * The GridKeydownTargetType is an enum or that specifies the possible target types \n     */\n    tag: GridKeydownTargetType;\n}\n\n/**\n * Represents event arguments related to sorting and grouping operations\n * The event is cancelable\n */\nexport interface ISortingEventArgs extends IBaseEventArgs, CancelableEventArgs {\n    /**\n     * Optional\n     * Represents the sorting expressions applied to the grid. \n     * It can be a single sorting expression or an array of them\n     * The expression contains information like file name, whether the letter case should be taken into account, etc.\n     */\n    sortingExpressions?: ISortingExpression | Array<ISortingExpression>;\n    /**\n     * Optional\n     * Represents the gouping expressions applied to the grid. \n     * It can be a single grouping expression or an array of them\n     * The expression contains information like the sorting expression and criteria by which the elements will be grouped\n     */\n    groupingExpressions?: IGroupingExpression | Array<IGroupingExpression>;\n}\n\n/**\n * Represents event arguments related to filtering operations\n * The event is cancelable\n */\nexport interface IFilteringEventArgs extends IBaseEventArgs, CancelableEventArgs {\n    /**\n     * Represents the filtering expressions applied to the grid.\n     * The expression contains information like filtering operands and operator, an expression or condition, etc. \n     */\n    filteringExpressions: IFilteringExpressionsTree;\n}\n\n/** The event arguments after a column's visibility is changed. */\nexport interface IColumnVisibilityChangedEventArgs extends IBaseEventArgs {\n    /** Represents the column the event originated from */\n    column: any;\n    /**\n     * The new hidden state that the column will have, if operation is succesfull.\n     * Will be `true` when hiding and `false` when showing.\n     */\n    newValue: boolean;\n}\n\n/**\n * The event arguments when a column's visibility is changed.\n * The event is cancelable\n * It contains information about the column and the it's visibility after the operation (will be `true` when hiding and `false` when showing)\n */\nexport interface IColumnVisibilityChangingEventArgs extends IColumnVisibilityChangedEventArgs, CancelableEventArgs {\n}\n\n"]}