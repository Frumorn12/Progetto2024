import { InjectionToken } from '@angular/core';
export const IGX_GRID_BASE = new InjectionToken('IgxGridBaseToken');
export const IGX_GRID_SERVICE_BASE = new InjectionToken('IgxGridServiceBaseToken');
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"grid.interface.js","sourceRoot":"","sources":["../../../../../../projects/igniteui-angular/src/lib/grids/common/grid.interface.ts"],"names":[],"mappings":"AAWA,OAAO,EAA+C,cAAc,EAA4C,MAAM,eAAe,CAAC;AA6BtI,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,cAAc,CAAW,kBAAkB,CAAC,CAAC;AAC9E,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,cAAc,CAAkB,yBAAyB,CAAC,CAAC","sourcesContent":["import { ColumnPinningPosition, FilterMode, GridPagingMode, GridSelectionMode, GridSummaryCalculationMode, GridSummaryPosition, GridValidationTrigger, RowPinningPosition } from './enums';\nimport {\n    ISearchInfo, IGridCellEventArgs, IRowSelectionEventArgs, IColumnSelectionEventArgs, IGridEditEventArgs,\n    IPinColumnCancellableEventArgs, IColumnVisibilityChangedEventArgs, IColumnVisibilityChangingEventArgs,\n    IRowDragEndEventArgs, IColumnMovingStartEventArgs, IColumnMovingEndEventArgs,\n    IGridEditDoneEventArgs, IRowDataEventArgs, IGridKeydownEventArgs, IRowDragStartEventArgs,\n    IColumnMovingEventArgs, IPinColumnEventArgs,\n    IActiveNodeChangeEventArgs,\n    ICellPosition, IFilteringEventArgs, IColumnResizeEventArgs, IRowToggleEventArgs, IGridToolbarExportEventArgs, IPinRowEventArgs\n} from '../common/events';\nimport { DisplayDensity, IDensityChangedEventArgs } from '../../core/density';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IGridResourceStrings } from '../../core/i18n/grid-resources';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IgxPaginatorComponent } from '../../paginator/paginator.component';\nimport { IgxCell, IgxEditRow } from './crud.service';\nimport { GridSelectionRange } from './types';\nimport { FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { DropPosition, IgxColumnMovingService } from '../moving/moving.service';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../../directives/toggle/toggle.directive';\nimport { Observable, Subject } from 'rxjs';\nimport { ITreeGridRecord } from '../tree-grid/tree-grid.interfaces';\nimport { State, Transaction, TransactionService } from '../../services/transaction/transaction';\nimport { DataType, GridColumnDataType } from '../../data-operations/data-util';\nimport { IgxFilteringOperand } from '../../data-operations/filtering-condition';\nimport { IColumnPipeArgs, IFieldPipeArgs, ISortingOptions, MRLResizeColumnInfo } from '../columns/interfaces';\nimport { IgxSummaryResult } from '../summaries/grid-summary';\nimport { ISortingExpression, ISortingStrategy, SortingDirection } from '../../data-operations/sorting-strategy';\nimport { IGridGroupingStrategy, IGridSortingStrategy } from './strategy';\nimport { IForOfState, IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { OverlaySettings } from '../../services/overlay/utilities';\nimport { IDimensionsChange, IPivotConfiguration, IPivotDimension, IPivotKeys, IPivotValue, IValuesChange, PivotDimensionType } from '../pivot-grid/pivot-grid.interface';\nimport { IDataCloneStrategy } from '../../data-operations/data-clone-strategy';\nimport { FormControl, FormGroup, ValidationErrors } from '@angular/forms';\nimport { IgxGridValidationService } from '../grid/grid-validation.service';\n\nexport const IGX_GRID_BASE = new InjectionToken<GridType>('IgxGridBaseToken');\nexport const IGX_GRID_SERVICE_BASE = new InjectionToken<GridServiceType>('IgxGridServiceBaseToken');\n\n/** Interface representing a segment of a path in a hierarchical grid. */\nexport interface IPathSegment {\n    /** The unique identifier of the row within the segment. */\n    rowID: any;\n    /** The key representing the row's 'hierarchical level. */\n    rowIslandKey: string;\n}\n\nexport interface IGridDataBindable {\n    data: any[] | null;\n    get filteredData(): any[];\n}\n\n/**\n * Interface representing a cell in the grid. It is essentially the blueprint to a cell object.\n * Contains definitions of properties and methods, relevant to a cell\n */\nexport interface CellType {\n    /** The current value of the cell. */\n    value: any;\n    /** The value to display when the cell is in edit mode. */\n    editValue: any;\n    /** Indicates whether the cell is currently selected. It is false, if the sell is not selected, and true, if it is. */\n    selected: boolean;\n    /** Indicates whether the cell is currently active (focused). */\n    active: boolean;\n    /** Indicates whether the cell can be edited. */\n    editable: boolean;\n    /** Indicates whether the cell is currently in edit mode. */\n    editMode: boolean;\n    /** Represents the native HTML element of the cell itself */\n    nativeElement?: HTMLElement;\n    /** Represents the column that the cell belongs to. */\n    column: ColumnType;\n    /** Represents the row that the cell belongs to */\n    row: RowType;\n    /** Represents the grid instance containing the cell */\n    grid: GridType;\n    /** Optional; An object identifying the cell. It contains rowID, columnID, and rowIndex of the cell. */\n    id?: { rowID: any; columnID: number; rowIndex: number };\n    /** Optional; The `cellID` is the unique key, used to identify the cell */\n    cellID?: any;\n    /**\n     * Optional; An object representing the validation state of the cell.\n     * Whether it's valid or invalid, and if it has errors\n     */\n    readonly validation?: IGridValidationState;\n    readonly?: boolean;\n    /** An optional title to display for the cell */\n    title?: any;\n    /** The CSS width of the cell as a string. */\n    width: string;\n    /** The index of the column that the cell belongs to. It counts only the visible (not hidden) columns */\n    visibleColumnIndex?: number;\n    /** A method definition to update the value of the cell. */\n    update: (value: any) => void;\n    /** A method definition to start or end the edit mode of the cell. It takes a boolean value as an argument*/\n    setEditMode?(value: boolean): void;\n    /**\n     * Optional;\n     * A method definition to calculate the size of the cell to fit the content\n     * The method can be used to calculate the size of the cell with the longest content and resize all cells to that size\n     */\n    calculateSizeToFit?(range: any): number;\n    /**\n     * Optional\n     * A method to activate the cell.\n     * It takes a focus or keyboard event as an argument\n     */\n    activate?(event: FocusEvent | KeyboardEvent): void;\n    /**\n     * Optional\n     * A method to handle double-click events on the cell\n     * It takes a mouse event as an argument\n     */\n    onDoubleClick?(event: MouseEvent): void;\n    /**\n     * Optional\n     * A method to handle click events on the cell\n     * It takes a mouse event as an argument\n     */\n    onClick?(event: MouseEvent): void;\n}\n\n/**\n * Interface representing a header cell in the grid. It is essentially the blueprint to a header cell object.\n * Contains definitions of properties, relevant to the header\n */\nexport interface HeaderType {\n    /** Represents the native HTML element of the cell itself */\n    nativeElement: HTMLElement;\n    /** The column that the header cell represents. */\n    column: ColumnType;\n    density: DisplayDensity;\n    /** Indicates whether the column is currently sorted. */\n    sorted: boolean;\n    /** Indicates whether the cell can be selected */\n    selectable: boolean;\n    /** Indicates whether the cell is currently selected */\n    selected: boolean;\n    /** Indicates whether the column header is a title cell. */\n    title: boolean;\n    /** Represents the sorting direction of the column (ascending, descending or none). */\n    sortDirection: SortingDirection;\n}\n\n/**\n * Interface representing a row in the grid. It is essentially the blueprint to a row object.\n * Contains definitions of properties and methods, relevant to a row\n */\nexport interface RowType {\n    /** Represents the native HTML element of the row itself */\n    nativeElement?: HTMLElement;\n    /** The index of the row within the grid */\n    index: number;\n    viewIndex: number;\n    /** Indicates whether the row is grouped. */\n    isGroupByRow?: boolean;\n    isSummaryRow?: boolean;\n    /**\n     * Optional\n     * A map of column field names to the summary results for the row.\n     */\n    summaries?: Map<string, IgxSummaryResult[]>;\n    groupRow?: IGroupByRecord;\n    key?: any;\n    readonly validation?: IGridValidationState;\n    data?: any;\n    /**\n     * Optional\n     * A list or an array of cells, that belong to the row\n     */\n    cells?: QueryList<CellType> | CellType[];\n    /**\n     * Optional\n     * Indicates whether the current row is disabled\n     */\n    disabled?: boolean;\n    /**\n     * Optional\n     * Virtualization state of data record added from cache\n     */\n    virtDirRow?: IgxGridForOfDirective<ColumnType, ColumnType[]>;\n    /**\n     * Optional\n     * Indicates whether the current row is pinned.\n     */\n    pinned?: boolean;\n    /**\n     * Optional\n     * Indicates whether the current row is selected\n     */\n    selected?: boolean;\n    /**\n     * Optional\n     * Indicates whether the current row is expanded.\n     * The value is true, if the row is expanded and false, if it is collapsed\n     */\n    expanded?: boolean;\n    /**\n     * Optional\n     * Indicades whether the row is marked for deletion.\n     */\n    deleted?: boolean;\n     /**\n     * Optional\n     * Indicades whether the row is currently being edited.\n     */\n    inEditMode?: boolean;\n    /**\n     * Optional\n     * Contains the child rows of the current row, if there are any.\n     */\n    children?: RowType[];\n    /**\n     * Optional\n     * Contains the parent row of the current row, if it has one.\n     * If the parent row exist, it means that the current row is a child row\n     */\n    parent?: RowType;\n    /**\n     * Optional\n     * Indicades whether the current row has any child rows\n     */\n    hasChildren?: boolean;\n    /**\n     * Optional\n     * Represents the hierarchical record associated with the row (for tree grids).\n     * It is of type ITreeGridRecord, which contains the data, children, the hierarchical level, etc.\n     */\n    treeRow?: ITreeGridRecord;\n    addRowUI?: boolean;\n    /**\n     * Optional\n     * Indicades whether the row is currently focused.\n     */\n    focused?: boolean;\n    /** Represent the grid instance, the row belongs to */\n    grid: GridType;\n    onRowSelectorClick?: (event: MouseEvent) => void;\n    /**\n     * Optional\n     * A method to handle click event on the row\n     * It takes a `MouseEvent` as an argument\n     */\n    onClick?: (event: MouseEvent) => void;\n    /**\n     * Optional\n     * A method to handle adding a new row\n     */\n    beginAddRow?: () => void;\n    /**\n     * Optional\n     * A method to handle changing the value of elements of the row\n     * It takes the new value as an argument\n     */\n    update?: (value: any) => void;\n    /**\n     * Optional\n     * A method to handle deleting rows\n     */\n    delete?: () => any;\n    /**\n     * Optional\n     * A method to handle pinning a row\n     */\n    pin?: () => void;\n    /**\n     * Optional\n     * A method to handle unpinning a row, that has been pinned\n     */\n    unpin?: () => void;\n}\n\nexport interface FieldType {\n    label?: string;\n    field: string;\n    header?: string;\n    dataType: DataType;\n    filters: IgxFilteringOperand;\n    pipeArgs: IFieldPipeArgs;\n    defaultTimeFormat: string;\n    defaultDateTimeFormat: string;\n\n    formatter(value: any, rowData?: any): any;\n}\n\n/**\n * Represents a column in the `GridType`. It is essentially the blueprint to a column object.\n * Contains definitions of properties and methods, relevant to a column\n */\nexport interface ColumnType extends FieldType {\n    /** Represents the inctance of the parent `GridType` that contains this column. */\n    grid: GridType;\n    /** A list, containing all the child columns under this column (if any). */\n    children: QueryList<ColumnType>;\n    /** An array, containing all the child columns, including nested children. */\n    allChildren: ColumnType[];\n    /**\n     * The header group component associated with this column.\n     * Could be of any type\n    */\n    // TYPE\n    headerGroup: any;\n    /**\n     * The header cell component associated with this column.\n     * Could be of any type\n     */\n    // TYPE\n    headerCell: any;\n    validators: any[];\n\n    /**\n     * The template reference for the custom header of the column\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    headerTemplate: TemplateRef<any>;\n    /**\n     * The template reference for the collapsible indicator of the column.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    collapsibleIndicatorTemplate?: TemplateRef<any>;\n    /** Represents custom CSS classes applied to the header element. When added, they take different styling */\n    headerClasses: any;\n    /** Represents custom CSS styles applied to the header element. When added, they take different styling */\n    headerStyles: any;\n     /** Represents custom CSS classes applied to the header group. When added, they take different styling */\n    headerGroupClasses: any;\n     /** Represents custom CSS styles applied to the header group. When added, they take different styling */\n    headerGroupStyles: any;\n\n    /** \n     * Custom CSS styling, appplied to every column \n     * calcWidth, minWidthPx, maxWidthPx, minWidth, maxWidth, minWidthPercent, maxWidthPercent, resolvedWidth\n     */\n    calcWidth: any;\n    minWidthPx: number;\n    maxWidthPx: number;\n    minWidth: string;\n    maxWidth: string;\n    minWidthPercent: number;\n    maxWidthPercent: number;\n    resolvedWidth: string;\n\n    /**\n     * Optional\n     * Represents the header text of the column\n     */\n    header?: string;\n    /**\n     * The index of the column within the grid.\n     * Includes the hidden columns when counting\n     */\n    index: number;\n    /**\n     * Represents the type of data for the column:\n     * string, number, buulean, currency, date, time, etc.\n     */\n    dataType: GridColumnDataType;\n    /**\n     * The template reference for the custom inline editor of the column\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    inlineEditorTemplate: TemplateRef<any>;\n    /**\n     * The index of the column within the grid.\n     * Does not include the hidden columns when counting\n     */\n    visibleIndex: number;\n    /** Optional\n     * Indicated whether the column can be collapsed. If the value is true, the column can be collapsed\n     * It is used in tree grid and for navigation\n     */\n    collapsible?: boolean;\n    /** Indicated whether the column can be edited. If the value is true, the column can be edited */\n    editable: boolean;\n    /** Specifies whether the column can be resized. If the value is true, the column can be resized */\n    resizable: boolean;\n    /** Specifies whether the data of the column can be searched. If the value is true, the column data can be searched */\n    searchable: boolean;\n    /** Specifies whether the column belongs to a group of columns. */\n    columnGroup: boolean;\n    /** @deprecated in version 13.1.0. Use `IgxGridComponent.moving` instead.*/\n    movable: boolean;\n    /** Indicades whether a column can be put in a group. If the value is true, the column can be put in a group */\n    groupable: boolean;\n    /** Indicades whether a column can be sorted. If the value is true, the column can be sorted. */\n    sortable: boolean;\n    /** Indicades whether a column can be filtered. If the value is true, the column can be filtered */\n    filterable: boolean;\n    /** Indicades whether a column is currently hidden (not visible). If the value is true, the column is not visible */\n    hidden: boolean;\n    /** Indicades whether a column can be pinned. If the value is true, the column cannot be pinned */\n    disablePinning: boolean;\n    /** Indicades whether a column can be hidden. If the value is true, the column cannot be hidden */\n    disableHiding: boolean;\n    /**\n     * The sorting strategy used for sorting this column.\n     * The interface contains a method sort that sorts the provided data based on the given sorting expressions\n     */\n    sortStrategy: ISortingStrategy;\n     /**\n     * Indicates whether the search should match results, no matter the case of the letters (upper and lower)\n     * If the value is false, the result will depend on the case (example: `E` will not match `e`)\n     * If the value is true, the result will not depend on the case (example: `E` will match `e`)\n     */\n    sortingIgnoreCase: boolean;\n    filterCell: any;\n    filteringIgnoreCase: boolean;\n    /**\n     * The filtering expressions for the column.\n     * The type contains properties and methods for filtering: filteringOperands, operator (logic), fieldName, etc.\n     */\n    filteringExpressionsTree: FilteringExpressionsTree;\n    hasSummary: boolean;\n    summaries: any;\n    /**\n     * The template reference for a summary of the column\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    summaryTemplate: TemplateRef<any>;\n    /** Indicates if the column is currently pinned. If the value is true, the column is pinned */\n    pinned: boolean;\n    /** Indicates if the column is currently expanded or collapsed. If the value is true, the column is expanded */\n    expanded: boolean;\n    /** Indicates if the column is currently selected. If the value is true, the column is selected */\n    selected: boolean;\n    /** Indicates if the column can be selected. If the value is true, the column can be selected */\n    selectable: boolean;\n    columnLayout: boolean;\n    /** Represents the hierarchical level of the column in the column layout */\n    level: number;\n    rowStart: number;\n    rowEnd: number;\n    colStart: number;\n    colEnd: number;\n    gridRowSpan: number;\n    gridColumnSpan: number;\n    columnLayoutChild: boolean;\n    width: string;\n    /**\n     * Optional\n     * The root parent of this column (if any).\n     * If there is no root parent, that means the current solunm is the root parent\n     */\n    topLevelParent?: ColumnType;\n    /**\n     * Optional\n     * The immediate parent (right above) column of this column (if any).\n     * If there is no parent, that means the current solunm is the root parent\n     */\n    parent?: ColumnType;\n    pipeArgs: IColumnPipeArgs;\n    hasNestedPath: boolean;\n    additionalTemplateContext: any;\n    /** Indicates whether the current column is the last to be pinned.\n     * If the value is false, there are columns, that have been pinned after the current */\n    isLastPinned: boolean;\n    /** Indicates whether the current column is the first for the grid to be pinned.\n     * If the value is false, there are columns, that have been pinned before the current */\n    isFirstPinned: boolean;\n    applySelectableClass: boolean;\n    /** The title of the column, used for accessibility purposes */\n    title: string;\n    /** Represents a method with custom grouping comparator to determine the members of the group. */\n    groupingComparer: (a: any, b: any) => number;\n\n    /**\n     * Represents a custom template for filtering\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    filterCellTemplate: TemplateRef<any>;\n\n    /**\n     * A method definition to move the column to the specified index.\n     * It takes the index of type number as a parameter\n    */\n    move(index: number): void;\n    /** A method definition to retrieve the set CSS size */\n    getAutoSize(): string;\n    getResizableColUnderEnd(): MRLResizeColumnInfo[];\n    /** A method definition to retrieve the set CSS width of the cells under the column */\n    getCellWidth(): string;\n    getGridTemplate(isRow: boolean): string;\n    /** A method definition to toggle column vibisility (hidden or visible) */\n    toggleVisibility(value?: boolean): void;\n    populateVisibleIndexes?(): void;\n    /** Pins the column at the specified index (if not already pinned). */\n    pin(index?: number): boolean;\n    /** Unpins the column at the specified index (if not already unpinned). */\n    unpin(index?: number): boolean;\n}\n\n/**\n * Interface representing the event arguments when a form group is created in the grid.\n * - formGroup: The form group that is created.\n * - owner: The grid instance that owns the form group.\n */\nexport interface IGridFormGroupCreatedEventArgs {\n    formGroup: FormGroup,\n    owner: GridType\n}\n\n/**\n * Interface representing the event arguments for the grid validation status change event.\n * - status: The validation status ('VALID' or 'INVALID').\n * - owner: The grid instance that owns the validation state.\n */\nexport interface IGridValidationStatusEventArgs {\n    status: ValidationStatus,\n    owner: GridType\n}\n\n/**\n * Type representing the validation status.\n * - 'VALID': The validation status is valid.\n * - 'INVALID': The validation status is invalid.\n */\nexport type ValidationStatus = 'VALID' | 'INVALID';\n\n/**\n * Interface representing the validation state of a grid.\n * - status: The validation status ('VALID' or 'INVALID').\n * - errors: The validation errors if any.\n */\nexport interface IGridValidationState {\n    readonly status: ValidationStatus;\n    readonly errors?: ValidationErrors;\n}\n\n/**\n * Interface representing the validation state of a record in the grid.\n * - `key`: The unique identifier of the record.\n * - `fields`: An array of the validation state of individual fields in the record.\n */\nexport interface IRecordValidationState extends IGridValidationState {\n    key: any;\n    fields: IFieldValidationState[];\n}\n\n/**\n * Interface representing the validation state of a field in the grid.\n * -`field`: The name of the field (property) being validated.\n */\nexport interface IFieldValidationState extends IGridValidationState {\n    field: string\n}\n\n/**\n * Represents the service interface for interacting with the grid.\n */\nexport interface GridServiceType {\n\n    /** The reference to the parent `GridType` that contains the service. */\n    grid: GridType;\n    /** Represents the type of the CRUD service (Create, Read, Update, Delete) operations on the grid data. */\n    crudService: any;\n    /** A service responsible for handling column moving within the grid. It contains a reference to the column, its icon, and indicator for cancelation. */\n    cms: IgxColumnMovingService;\n\n    /** Represents a method declaration for retrieving the data used in the grid. The returned values could be of any type */\n    get_data(): any[];\n    /**\n     * Represents a method declaration for retrieving all the data available in the grid, including any transactional data.\n     * `includeTransactions`: Optional parameter. Specifies whether to include transactional data if present.\n     * Returns an array containing all the data available in the grid.\n     */\n    get_all_data(includeTransactions?: boolean): any[];\n    /** Represents a method declaration for retrieving a column object by its name, taken as a parameter. */\n    get_column_by_name(name: string): ColumnType;\n    /** Represents a method declaration for retrieving the data associated with a specific row by its unique identifier (of any type, taken as a parameter). */\n    getRowData(id: any): any;\n    /** Represents a method declaration for retrieving the data associated with a specific record by its unique identifier (of any type, taken as a parameter). */\n    get_rec_by_id(id: any): any;\n    /** Represents a method declaration for retrieving the unique identifier of a specific row by its data. */\n    get_row_id(rowData: any): any;\n    /** Represents a method declaration for retrieving the row object associated with a specific index (taken as a parameter) in the grid */\n    get_row_by_index(rowSelector: any): RowType;\n    /** Represents a method declaration for retrieving the row object associated with a specific key (taken as a parameter) in the grid */\n    get_row_by_key(rowSelector: any): RowType;\n    /** Represents a method declaration for retrieving the index of a record in the grid's data collection using its unique identifier. */\n    get_rec_index_by_id(pk: string | number, dataCollection?: any[]): number;\n    /** Represents a method declaration for retrieving the index of a record in the grid's data collection using its index. */\n    get_rec_id_by_index(index: number, dataCollection?: any[]): any;\n    get_row_index_in_data(rowID: any, dataCollection?: any[]): number;\n    /** Represents a method declaration for retrieving the cell object associated with a specific row and column in the grid. */\n    get_cell_by_key(rowSelector: any, field: string): CellType;\n    /** Represents a method declaration for retrieving the cell object associated with a specific row and column using their indexes. */\n    get_cell_by_index(rowIndex: number, columnID: number | string): CellType;\n    /**\n     * Represents a method declaration for retrieving the cell object associated with a specific row and column using their indexes.\n     * It counts only the indexes of the visible columns and rows\n     */\n    get_cell_by_visible_index(rowIndex: number, columnIndex: number);\n    /** Represents a method declaration that sets the expansion state of a group row (used for tree grids)\n     * It takes the value for the expantion as a parameter (expanded or collapsed)\n     */\n    set_grouprow_expansion_state?(groupRow: IGroupByRecord, value: boolean): void;\n    row_deleted_transaction(id: any): boolean;\n    /**\n     * Represents a method declaration for adding a new row to the grid.\n     * It takes the row's data and the identifier of the parent row if applicable (used for tree grids)\n     */\n    addRowToData(rowData: any, parentID?: any): void;\n    /** Represents a method declaration for deleting a row, specified by it's identidier (taken as a parameter) */\n    deleteRowById(id: any): any;\n    /** Represents a method declaration for retrieving the row's current state of expantion (used for tree grids)*/\n    get_row_expansion_state(id: any): boolean;\n    /** Represents a method declaration for setting a new expantion state. It can be triggered by an event */\n    set_row_expansion_state(id: any, expanded: boolean, event?: Event): void;\n    get_summary_data(): any[];\n\n    prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression): void;\n    /**\n     * Represents a method declaration for sorting by only one expression\n     * The expression contains fieldName, sorting directory, whether case should be ignored and optional sorting strategy\n     */\n    sort(expression: ISortingExpression): void;\n    /**\n     * Represents a method declaration for sorting by multiple expressions\n     * The expressions contains fieldName, sorting directory, whether case should be ignored and optional sorting strategy\n     */\n    sort_multiple(expressions: ISortingExpression[]): void;\n    /** Represents a method declaration for reseting the sorting */\n    clear_sort(fieldName: string): void;\n\n    /** Represents an event, triggered when the pin state is changed */\n    get_pin_row_event_args(rowID: any, index?: number, row?: RowType, pinned?: boolean): IPinRowEventArgs;\n\n    filterDataByExpressions(expressionsTree: IFilteringExpressionsTree): any[];\n    sortDataByExpressions(data: any[], expressions: ISortingExpression[]): any[];\n\n    update_cell(cell: IgxCell): IGridEditEventArgs;\n    update_row(row: IgxEditRow, value: any, event?: Event): IGridEditEventArgs;\n\n    expand_path_to_record?(record: ITreeGridRecord): void;\n    get_selected_children?(record: ITreeGridRecord, selectedRowIDs: any[]): void;\n    get_groupBy_record_id?(gRow: IGroupByRecord): string;\n    remove_grouping_expression?(fieldName: string): void;\n    clear_groupby?(field: string | any): void;\n    getParentRowId?(child: GridType): any;\n    getChildGrids?(inDepth?: boolean): GridType[];\n    getChildGrid?(path: IPathSegment[]): GridType;\n\n    unsetChildRowIsland?(rowIsland: GridType): void;\n    registerChildRowIsland?(rowIsland: GridType): void;\n}\n\n\n/**\n * Interface representing a grid type. It is essentially the blueprint to a grid object.\n * Contains definitions of properties and methods, relevant to a grid\n * Extends `IGridDataBindable`\n */\nexport interface GridType extends IGridDataBindable {\n    /** @deprecated since version 16.1.x. Please use the `--ig-size` CSS custom property. */\n    displayDensity: DisplayDensity;\n    /** Represents the locale of the drig: `USD`, `EUR`, `GBP`, `CNY`, `JPY`, etc. */\n    locale: string;\n    resourceStrings: IGridResourceStrings;\n    /** Represents the native HTML element itself */\n    nativeElement: HTMLElement;\n    /** Indicates whether rows in the grid are editable. If te value is true, the rows can be edited */\n    rowEditable: boolean;\n    rootSummariesEnabled: boolean;\n    /** Indicates whether filtering in the grid is enabled. If te value is true, the grid can be filtered */\n    allowFiltering: boolean;\n     /** Indicates whether rows in the grid can be dragged. If te value is true, the rows can be dragged */\n    rowDraggable: boolean;\n    /** Represents the unique primary key used for identifying rows in the grid */\n    primaryKey: any;\n    /** Represents the unique identifier of the grid. */\n    id: string;\n    /** The height of the visible rows in the grid. */\n    renderedRowHeight: number;\n    pipeTrigger: number;\n    summaryPipeTrigger: number;\n    /** @hidden @internal */\n    groupablePipeTrigger: number;\n    filteringPipeTrigger: number;\n    /** @hidden @internal */\n    hasColumnLayouts: boolean;\n    /** Indicates whether the grid is currently in a moving state. */\n    moving: boolean;\n    isLoading: boolean;\n\n    /** Strategy, used for cloning the provided data. The type has one method, that takes any type of data */\n    dataCloneStrategy: IDataCloneStrategy;\n\n    /** Represents the grid service type providing API methods for the grid */\n    readonly gridAPI: GridServiceType;\n\n    /** The filter mode for the grid. It can be quick filter of excel-style filter */\n    filterMode: FilterMode;\n\n    // TYPE\n    /** @hidden @internal */\n    theadRow: any;\n    /** @hidden @internal */\n    groupArea: any;\n    /** @hidden @internal */\n    filterCellList: any[];\n    /** @hidden @internal */\n    filteringRow: any;\n    /** @hidden @internal */\n    actionStrip: any;\n    /** @hidden @internal */\n    resizeLine: any;\n\n    /** @hidden @internal */\n    tfoot: ElementRef<HTMLElement>;\n    /** @hidden @internal */\n    paginator: IgxPaginatorComponent;\n    /** @hidden @internal */\n    paginatorList?: QueryList<IgxPaginatorComponent>;\n    /** @hidden @internal */\n    crudService: any;\n    /** @hidden @internal */\n    summaryService: any;\n\n\n\n    /** Represents the state of virtualization for the grid. It has an owner, start index and chunk size */\n    virtualizationState: IForOfState;\n    // TYPE\n    /** @hidden @internal */\n    /** The service handling selection in the grid. Selecting, deselecting elements */\n    selectionService: any;\n    navigation: any;\n    /** @hidden @internal */\n    filteringService: any;\n    outlet: any;\n    /** Indicates whether the grid has columns that can be moved */\n    /** @hidden @internal */\n    hasMovableColumns: boolean;\n    /** Indicates whether the grid's rows can be selected */\n    isRowSelectable: boolean;\n    /** Indicates whether the selectors of the rows are visible */\n    showRowSelectors: boolean;\n    /** Indicates whether the grid's element is pinned to the start of the grid */\n    isPinningToStart: boolean;\n    /** Idicates if the column of the grid is in drag mode */\n    columnInDrag: any;\n    /** @hidden @internal */\n    /** The width of pinned element */\n    pinnedWidth: number;\n    /** @hidden @internal */\n    /** The width of unpinned element */\n    unpinnedWidth: number;\n    /** The CSS margin of the summaries */\n    summariesMargin: number;\n    headSelectorBaseAriaLabel: string;\n\n    /** Indicates whether the grid has columns that are shown */\n    hasVisibleColumns: boolean;\n    /**\n     * Optional\n     * Indicates whether the grid has expandable children (hierarchical and tree grid)\n     */\n    hasExpandableChildren?: boolean;\n    /**\n     * Optional\n     * Indicates whether collapsed grid elements should be expanded\n     */\n    showExpandAll?: boolean;\n\n    /** Represents the count of only the hidden (not visible) columns */\n    hiddenColumnsCount: number;\n    /** Represents the count of only the pinned columns */\n    pinnedColumnsCount: number;\n\n    /**\n     * Optional\n     * The template for grid icons.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    iconTemplate?: TemplateRef<any>;\n    /**\n     * Optional\n     * The template for group-by rows.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    groupRowTemplate?: TemplateRef<IgxGroupByRowTemplateContext>;\n    /**\n     * Optional\n     * The template for the group row selector.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    groupByRowSelectorTemplate?: TemplateRef<IgxGroupByRowSelectorTemplateContext>;\n    /**\n     * Optional\n     * The template for row loading indicators.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    rowLoadingIndicatorTemplate?: TemplateRef<any>;\n    /**\n     * The template for the header selector.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    headSelectorTemplate: TemplateRef<IgxHeadSelectorTemplateContext>;\n    /**\n     * The template for row selectors.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    rowSelectorTemplate: TemplateRef<IgxRowSelectorTemplateContext>;\n    /**\n     * The template for sort header icons.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    sortHeaderIconTemplate: TemplateRef<IgxGridHeaderTemplateContext>;\n    /**\n     * The template for ascending sort header icons.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    sortAscendingHeaderIconTemplate: TemplateRef<IgxGridHeaderTemplateContext>;\n    /**\n     * The template for descending sort header icons.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    sortDescendingHeaderIconTemplate: TemplateRef<IgxGridHeaderTemplateContext>;\n    /**\n     * The template for header collapsed indicators.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    headerCollapsedIndicatorTemplate: TemplateRef<IgxGridTemplateContext>;\n    /**\n     * The template for header expanded indicators.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    headerExpandedIndicatorTemplate: TemplateRef<IgxGridTemplateContext>;\n    /** The template for drag indicator icons. Could be of any type */\n    dragIndicatorIconTemplate: any;\n    /** The base drag indicator icon. Could be of any type */\n    dragIndicatorIconBase: any;\n    /** Indicates whether transitions are disabled for the grid. */\n    disableTransitions: boolean;\n    /** Indicates whether the currency symbol is positioned to the left of values. */\n    currencyPositionLeft: boolean;\n\n    /** Indicates whether the width of the column is set by the user, or is configured automatically. */\n    columnWidthSetByUser: boolean;\n    headerFeaturesWidth: number;\n    /** CSS styling calculated for an element: calcHeight, calcWidth, outerWidth */\n    calcHeight: number;\n    calcWidth: number;\n    outerWidth: number;\n    /** The height of each row in the grid. Setting a constant height can solve problems with not showing all alements when scrolling */\n    rowHeight: number;\n    multiRowLayoutRowSize: number;\n    /** Minimal width for headers */\n    defaultHeaderGroupMinWidth: any;\n    maxLevelHeaderDepth: number;\n    defaultRowHeight: number;\n    /** The default font size, calculated for each element */\n    _baseFontSize?: number;\n    scrollSize: number;\n\n    /** The trigger for grid validation. It's value can eighter be `change` or `blur` */\n    validationTrigger: GridValidationTrigger;\n    /**\n     * The configuration for columns and rows pinning in the grid\n     * It's of type IPinningConfig, which can have value for columns (start, end) and for rows (top, bottom)\n    */\n    pinning: IPinningConfig;\n    expansionStates: Map<any, boolean>;\n    parentVirtDir: any;\n    tbody: any;\n    verticalScrollContainer: any;\n    dataRowList: any;\n    rowList: any;\n    /** An unmodifiable list, containing all the columns of the grid. */\n    columnList: QueryList<ColumnType>;\n    columns: ColumnType[];\n    /** An array of columns, but it counts only the ones visible (not hidden) in the view */\n    visibleColumns: ColumnType[];\n    /** An array of columns, but it counts only the ones that are not pinned */\n    unpinnedColumns: ColumnType[];\n    /** An array of columns, but it counts only the ones that are pinned */\n    pinnedColumns: ColumnType[];\n    /** represents an array of the headers of the columns */\n    /** @hidden @internal */\n    headerCellList: any[];\n    /** @hidden @internal */\n    headerGroups: any[];\n    /** @hidden @internal */\n    headerGroupsList: any[];\n    summariesRowList: any;\n    /** @hidden @internal */\n    headerContainer: any;\n    /** Indicates whether cells are selectable in the grid */\n    isCellSelectable: boolean;\n    /** Indicates whether it is allowed to select more than one row in the grid */\n    isMultiRowSelectionEnabled: boolean;\n    hasPinnedRecords: boolean;\n    pinnedRecordsCount: number;\n    pinnedRecords: any[];\n    unpinnedRecords: any[];\n    /** @hidden @internal */\n    pinnedDataView: any[];\n    pinnedRows: any[];\n    dataView: any[];\n    _filteredUnpinnedData: any[];\n    _filteredSortedUnpinnedData: any[];\n    filteredSortedData: any[];\n    dataWithAddedInTransactionRows: any[];\n    /** Represents the transaction service for the grid. */\n    readonly transactions: TransactionService<Transaction, State>;\n    /** Represents the validation service for the grid. The type contains properties and methods (logic) for validating records */\n    readonly validation: IgxGridValidationService;\n    defaultSummaryHeight: number;\n    summaryRowHeight: number;\n    rowEditingOverlay: IgxToggleDirective;\n    totalRowsCountAfterFilter: number;\n    _totalRecords: number;\n    /**\n     * Represents the paging of the grid. It can be eighter 'Local' or 'Remote'\n     * - Local: Default value; The grid will paginate the data source based on the page\n     */\n    pagingMode: GridPagingMode;\n    /** The paging state for the grid; Used to configure how paging should be applied - which is the current page, records per page */\n    /** @hidden */\n    pagingState: any;\n\n    rowEditTabs: any;\n    /** Represents the last search in the grid\n     * It contains the search text (the user has entered), the match and some settings for the search\n     */\n    lastSearchInfo: ISearchInfo;\n    /** @hidden @internal */\n    page: number;\n    /** @hidden @internal */\n    perPage: number;\n    /** The ID of the row currently being dragged in the grid. */\n    /** @hidden @internal */\n    dragRowID: any;\n    /** Indicates whether a row is currently being dragged */\n    rowDragging: boolean;\n\n    firstEditableColumnIndex: number;\n    lastEditableColumnIndex: number;\n    isRowPinningToTop: boolean;\n    hasDetails: boolean;\n    /** @hidden @internal */\n    hasSummarizedColumns: boolean;\n    /** @hidden @internal */\n    hasColumnGroups: boolean;\n    /** @hidden @internal */\n    hasEditableColumns: boolean;\n    /** Property, that provides a callback for loading unique column values on demand.\n     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering  */\n    uniqueColumnValuesStrategy: (column: ColumnType, tree: FilteringExpressionsTree, done: (values: any[]) => void) => void;\n    /** Property, that gets the header cell inner width for auto-sizing. */\n    getHeaderCellWidth: (element: HTMLElement) => ISizeInfo;\n\n    /**\n     * Provides change detection functionality.\n     * A change-detection tree collects all views that are to be checked for changes.\n     * The property cannot be changed (readonly) */\n    readonly cdr: ChangeDetectorRef;\n    /** @hidden @internal */\n    document: Document;\n     /**\n     * The template for expanded row indicators.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    rowExpandedIndicatorTemplate: TemplateRef<IgxGridRowTemplateContext>;\n    /**\n     * The template for collapsed row indicators.\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    rowCollapsedIndicatorTemplate: TemplateRef<IgxGridRowTemplateContext>;\n    /**\n     * The template for header icon\n     * It is of type TemplateRef, which represents an embedded template, used to instanciate embedded views\n     */\n    excelStyleHeaderIconTemplate: TemplateRef<IgxGridHeaderTemplateContext>;\n\n    selectRowOnClick: boolean;\n    /** Represents the selection mode for cells: 'none','single', 'multiple', 'multipleCascade' */\n    cellSelection: GridSelectionMode;\n    /** Represents the selection mode for rows: 'none','single', 'multiple', 'multipleCascade' */\n    rowSelection: GridSelectionMode;\n    /** Represents the selection mode for columns: 'none','single', 'multiple', 'multipleCascade' */\n    columnSelection: GridSelectionMode;\n    /** Represents the calculation mode for summaries: 'rootLevelOnly', 'childLevelsOnly', 'rootAndChildLevels' */\n    summaryCalculationMode: GridSummaryCalculationMode;\n    /** Represents the position of summaries: 'top', 'bottom' */\n    summaryPosition: GridSummaryPosition;\n\n    // XXX: Work around till we fixed the injection tokens\n    lastChildGrid?: GridType;\n    /** @hidden @internal */\n    toolbarOutlet?: ViewContainerRef;\n    /** @hidden @internal */\n    paginatorOutlet?: ViewContainerRef;\n    flatData?: any[] | null;\n    childRow?: any;\n    expansionDepth?: number;\n    childDataKey?: any;\n    foreignKey?: any;\n    cascadeOnDelete?: boolean;\n    loadChildrenOnDemand?: (parentID: any, done: (children: any[]) => void) => void;\n    hasChildrenKey?: any;\n    loadingRows?: Set<any>;\n    parent?: GridType;\n    highlightedRowID?: any;\n    updateOnRender?: boolean;\n    childLayoutKeys?: any[];\n    childLayoutList?: QueryList<any>;\n    rootGrid?: GridType;\n    processedRootRecords?: ITreeGridRecord[];\n    rootRecords?: ITreeGridRecord[];\n    records?: Map<any, ITreeGridRecord>;\n    processedExpandedFlatData?: any[] | null;\n    processedRecords?: Map<any, ITreeGridRecord>;\n    treeGroupArea?: any;\n\n    activeNodeChange: EventEmitter<IActiveNodeChangeEventArgs>;\n    gridKeydown: EventEmitter<IGridKeydownEventArgs>;\n    cellClick: EventEmitter<IGridCellEventArgs>;\n    doubleClick: EventEmitter<IGridCellEventArgs>;\n    contextMenu: EventEmitter<IGridCellEventArgs>;\n    selected: EventEmitter<IGridCellEventArgs>;\n    rangeSelected: EventEmitter<GridSelectionRange>;\n    rowSelectionChanging: EventEmitter<IRowSelectionEventArgs>;\n    localeChange: EventEmitter<boolean>;\n    filtering: EventEmitter<IFilteringEventArgs>;\n    filteringDone: EventEmitter<IFilteringExpressionsTree>;\n    columnPinned: EventEmitter<IPinColumnEventArgs>;\n    columnResized: EventEmitter<IColumnResizeEventArgs>;\n    columnMovingEnd: EventEmitter<IColumnMovingEndEventArgs>;\n    columnSelectionChanging: EventEmitter<IColumnSelectionEventArgs>;\n    columnMoving: EventEmitter<IColumnMovingEventArgs>;\n    columnMovingStart: EventEmitter<IColumnMovingStartEventArgs>;\n    columnPin: EventEmitter<IPinColumnCancellableEventArgs>;\n    columnVisibilityChanging: EventEmitter<IColumnVisibilityChangingEventArgs>;\n    columnVisibilityChanged: EventEmitter<IColumnVisibilityChangedEventArgs>;\n    batchEditingChange?: EventEmitter<boolean>;\n    densityChanged: EventEmitter<IDensityChangedEventArgs>;\n    rowAdd: EventEmitter<IGridEditEventArgs>;\n    rowAdded: EventEmitter<IRowDataEventArgs>;\n    rowAddedNotifier: Subject<IRowDataEventArgs>;\n    rowDeleted: EventEmitter<IRowDataEventArgs>;\n    rowDeletedNotifier: Subject<IRowDataEventArgs>;\n    cellEditEnter: EventEmitter<IGridEditEventArgs>;\n    cellEdit: EventEmitter<IGridEditEventArgs>;\n    cellEditDone: EventEmitter<IGridEditDoneEventArgs>;\n    cellEditExit: EventEmitter<IGridEditDoneEventArgs>;\n    rowEditEnter: EventEmitter<IGridEditEventArgs>;\n    rowEdit: EventEmitter<IGridEditEventArgs>;\n    rowEditDone: EventEmitter<IGridEditDoneEventArgs>;\n    rowEditExit: EventEmitter<IGridEditDoneEventArgs>;\n    rowDragStart: EventEmitter<IRowDragStartEventArgs>;\n    rowDragEnd: EventEmitter<IRowDragEndEventArgs>;\n    rowToggle: EventEmitter<IRowToggleEventArgs>;\n    formGroupCreated: EventEmitter<IGridFormGroupCreatedEventArgs>;\n    validationStatusChange: EventEmitter<IGridValidationStatusEventArgs>;\n\n    toolbarExporting: EventEmitter<IGridToolbarExportEventArgs>;\n    rendered$: Observable<boolean>;\n    resizeNotify: Subject<void>;\n\n    sortStrategy: IGridSortingStrategy;\n    groupStrategy?: IGridGroupingStrategy;\n    filteringLogic: FilteringLogic;\n    filterStrategy: IFilteringStrategy;\n    allowAdvancedFiltering: boolean;\n    sortingExpressions: ISortingExpression[];\n    sortingExpressionsChange: EventEmitter<ISortingExpression[]>;\n    filteringExpressionsTree: IFilteringExpressionsTree;\n    filteringExpressionsTreeChange: EventEmitter<IFilteringExpressionsTree>;\n    advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    advancedFilteringExpressionsTreeChange: EventEmitter<IFilteringExpressionsTree>;\n    sortingOptions: ISortingOptions;\n\n    batchEditing: boolean;\n    groupingExpansionState?: IGroupByExpandState[];\n    groupingExpressions?: IGroupingExpression[];\n    groupingExpressionsChange?: EventEmitter<IGroupingExpression[]>;\n    groupsExpanded?: boolean;\n    readonly groupsRecords?: IGroupByRecord[];\n    groupingFlatResult?: any[];\n    groupingResult?: any[];\n    groupingMetadata?: any[];\n    selectedCells?: CellType[];\n    selectedRows: any[];\n    /** @hidden @internal */\n    activeDescendant?: string;\n    /** @hidden @internal */\n    isPivot?: boolean;\n\n    toggleGroup?(groupRow: IGroupByRecord): void;\n    clearGrouping?(field: string): void;\n    groupBy?(expression: IGroupingExpression | Array<IGroupingExpression>): void;\n    resolveOutlet?(): IgxOverlayOutletDirective;\n    updateColumns(columns: ColumnType[]): void;\n    getSelectedRanges(): GridSelectionRange[];\n    deselectAllColumns(): void;\n    deselectColumns(columns: string[] | ColumnType[]): void;\n    selectColumns(columns: string[] | ColumnType[]): void;\n    selectedColumns(): ColumnType[];\n    refreshSearch(): void;\n    getDefaultExpandState(record: any): boolean;\n    trackColumnChanges(index: number, column: any): any;\n    getPossibleColumnWidth(): string;\n    resetHorizontalVirtualization(): void;\n    hasVerticalScroll(): boolean;\n    getVisibleContentHeight(): number;\n    getDragGhostCustomTemplate(): TemplateRef<any> | null;\n    openRowOverlay(id: any): void;\n    openAdvancedFilteringDialog(): void;\n    showSnackbarFor(index: number): void;\n    getColumnByName(name: string): any;\n    getColumnByVisibleIndex(index: number): ColumnType;\n    getHeaderGroupWidth(column: ColumnType): string;\n    getRowByKey?(key: any): RowType;\n    getRowByIndex?(index: number): RowType;\n    setFilteredData(data: any, pinned: boolean): void;\n    setFilteredSortedData(data: any, pinned: boolean): void;\n    sort(expression: ISortingExpression | ISortingExpression[]): void;\n    clearSort(name?: string): void;\n    pinRow(id: any, index?: number, row?: RowType): boolean;\n    unpinRow(id: any, row?: RowType): boolean;\n    getUnpinnedIndexById(id: any): number;\n    getEmptyRecordObjectFor(inRow: RowType): any;\n    isSummaryRow(rec: any): boolean;\n    isRecordPinned(rec: any): boolean;\n    getInitialPinnedIndex(rec: any): number;\n    isRecordPinnedByViewIndex(rowIndex: number): boolean;\n    isColumnGrouped(fieldName: string): boolean;\n    isDetailRecord(rec: any): boolean;\n    isGroupByRecord(rec: any): boolean;\n    isGhostRecord(rec: any): boolean;\n    isTreeRow?(rec: any): boolean;\n    isChildGridRecord?(rec: any): boolean;\n    getChildGrids?(inDepth?: boolean): any[];\n    isHierarchicalRecord?(record: any): boolean;\n    columnToVisibleIndex(key: string | number): number;\n    moveColumn(column: ColumnType, target: ColumnType, pos: DropPosition): void;\n    navigateTo(rowIndex: number, visibleColumnIndex: number, callback?: (e: any) => any): void;\n    getPreviousCell(currRowIndex: number, curVisibleColIndex: number, callback: (c: ColumnType) => boolean): ICellPosition;\n    getNextCell(currRowIndex: number, curVisibleColIndex: number, callback: (c: ColumnType) => boolean): ICellPosition;\n    clearCellSelection(): void;\n    selectRange(range: GridSelectionRange | GridSelectionRange[]): void;\n    selectRows(rowIDs: any[], clearCurrentSelection?: boolean): void;\n    deselectRows(rowIDs: any[]): void;\n    selectAllRows(onlyFilterData?: boolean): void;\n    deselectAllRows(onlyFilterData?: boolean): void;\n    setUpPaginator(): void;\n    createFilterDropdown(column: ColumnType, options: OverlaySettings): any;\n    updateCell(value: any, rowSelector: any, column: string): void;\n    // Type to RowType\n    createRow?(index: number, data?: any): RowType;\n    deleteRow(id: any): any;\n    deleteRowById(id: any): any;\n    updateRow(value: any, rowSelector: any): void;\n    collapseRow(id: any): void;\n    notifyChanges(repaint?: boolean): void;\n    resetColumnCollections(): void;\n    triggerPipes(): void;\n    repositionRowEditingOverlay(row: RowType): void;\n    closeRowEditingOverlay(): void;\n    reflow(): void;\n\n    // TODO: Maybe move them to FlatGridType, but then will we need another token?\n    isExpandedGroup(group: IGroupByRecord): boolean;\n    createColumnsList?(cols: ColumnType[]): void;\n    toggleAllGroupRows?(): void;\n    toggleAll?(): void;\n    generateRowPath?(rowId: any): any[];\n    preventHeaderScroll?(args: any): void;\n}\n\n/**\n * An interface describing a Flat Grid type. It is essentially the blueprint to a grid kind\n * Contains definitions of properties and methods, relevant to a grid kind\n * Extends from `GridType`\n */\nexport interface FlatGridType extends GridType {\n    groupingExpansionState: IGroupByExpandState[];\n    groupingExpressions: IGroupingExpression[];\n    groupingExpressionsChange: EventEmitter<IGroupingExpression[]>;\n\n    toggleGroup(groupRow: IGroupByRecord): void;\n    clearGrouping(field: string): void;\n    groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void;\n}\n\n/**\n * An interface describing a Tree Grid type. It is essentially the blueprint to a grid kind\n * Contains definitions of properties and methods, relevant to a grid kind\n * Extends from `GridType`\n */\nexport interface TreeGridType extends GridType {\n    records: Map<any, ITreeGridRecord>;\n    isTreeRow(rec: any): boolean;\n}\n\n/**\n * An interface describing a Hierarchical Grid type. It is essentially the blueprint to a grid kind\n * Contains definitions of properties and methods, relevant to a grid kind\n * Extends from `GridType`\n */\nexport interface HierarchicalGridType extends GridType {\n    childLayoutKeys: any[];\n}\n\n/**\n * An interface describing a Pivot Grid type. It is essentially the blueprint to a grid kind\n * Contains definitions of properties and methods, relevant to a grid kind\n * Extends from `GridType`\n */\nexport interface PivotGridType extends GridType {\n    /**\n     * The configuration settings for the pivot grid.\n     * it includes dimention strategy for rows and columns, filters and data keys\n     */\n    pivotConfiguration: IPivotConfiguration;\n    /**\n     * An array of all dimensions (rows and columns) in the pivot grid.\n     * it includes hierarchical level, filters and sorting, dimentional level, etc.\n     */\n    allDimensions: IPivotDimension[],\n    /** Specifies whether to show the pivot configuration UI in the grid. */\n    showPivotConfigurationUI: boolean;\n    /** @hidden @internal */\n    columnDimensions: IPivotDimension[];\n    /** @hidden @internal */\n    rowDimensions: IPivotDimension[];\n    rowDimensionResizing: boolean;\n    /** @hidden @internal */\n    values: IPivotValue[];\n    /** @hidden @internal */\n    filterDimensions: IPivotDimension[];\n    /** @hidden @internal */\n    dimensionDataColumns: ColumnType[];\n    pivotRowWidths: number;\n    /** Represents a method declaration for seting up the columns for the pivot grid based on the pivot configuration */\n    setupColumns(): void;\n    /** Represents a method declaration that allows toggle of expansion state of a row (taken as a parameter) in the pivot grid */\n    toggleRow(rowID: any): void;\n    /**\n     * Represents a method declaration for resolving the data type for a specific field (column).\n     * It takes the field as a parameter and returns it's type\n     */\n    resolveDataTypes(field: any): GridColumnDataType;\n    /**\n     * Represents a method declaration for moving dimension from its currently collection to the specified target collection\n     * by type (Row, Column or Filter) at specified index or at the collection's end\n     */\n    moveDimension(dimension: IPivotDimension, targetCollectionType: PivotDimensionType, index?: number);\n    getDimensionsByType(dimension: PivotDimensionType);\n    /** Toggles the dimension's enabled state on or off. The dimension remains in its current collection */\n    toggleDimension(dimension: IPivotDimension);\n    /** Sort the dimension and its children in the provided direction (ascending, descending or none). */\n    sortDimension(dimension: IPivotDimension, sortDirection: SortingDirection);\n    /** Toggles the value's enabled state on or off. The value remains in its current collection. */\n    toggleValue(value: IPivotValue);\n    /** Move value from its currently at specified index or at the end.\n     * If the parameter is not set, it will add it to the end of the collection. */\n    moveValue(value: IPivotValue, index?: number);\n    rowDimensionWidthToPixels(dim: IPivotDimension): number;\n    /** Emits an event when the dimensions in the pivot grid change. */\n    dimensionsChange: EventEmitter<IDimensionsChange>;\n    /** Emits an event when the values in the pivot grid change. */\n    valuesChange: EventEmitter<IValuesChange>;\n    /** @hidden @internal */\n    pivotKeys: IPivotKeys;\n    hasMultipleValues: boolean;\n    excelStyleFilterMaxHeight: string;\n    excelStyleFilterMinHeight: string;\n    valueChipTemplate: TemplateRef<any>;\n}\n\nexport interface GridSVGIcon {\n    name: string;\n    value: string;\n}\n\nexport interface ISizeInfo {\n    width: number,\n    padding: number\n}\n\nexport interface IgxGridMasterDetailContext {\n    $implicit: any;\n    index: number;\n}\n\nexport interface IgxGroupByRowTemplateContext {\n    $implicit: IGroupByRecord;\n}\n\nexport interface IgxGridTemplateContext {\n    $implicit: GridType\n}\n\nexport interface IgxGridRowTemplateContext {\n    $implicit: RowType\n}\n\nexport interface IgxGridRowDragGhostContext {\n    $implicit: any, // this is the row data\n    data: any, // this is also the row data for some reason.\n    grid: GridType\n}\n\nexport interface IgxGridEmptyTemplateContext {\n    $implicit: undefined\n}\n\nexport interface IgxGridRowEditTemplateContext {\n    $implicit: undefined,\n    rowChangesCount: number,\n    endEdit: (commit: boolean, event?: Event) => void\n}\n\nexport interface IgxGridRowEditTextTemplateContext {\n    $implicit: number\n}\n\nexport interface IgxGridRowEditActionsTemplateContext {\n    $implicit: (commit: boolean, event?: Event) => void\n}\n\nexport interface IgxGridHeaderTemplateContext {\n    $implicit: HeaderType\n}\n\nexport interface IgxColumnTemplateContext {\n    $implicit: ColumnType,\n    column: ColumnType\n}\n\nexport interface IgxCellTemplateContext {\n    $implicit: any,\n    additionalTemplateContext: any,\n    formControl?: FormControl<any>,\n    defaultErrorTemplate?: TemplateRef<any>,\n    cell: CellType\n}\n\nexport interface IgxRowSelectorTemplateDetails {\n    index: number;\n    /** @deprecated Use `key` */\n    rowID: any;\n    key: any;\n    selected: boolean;\n    select?: () => void;\n    deselect?: () => void;\n}\n\nexport interface IgxRowSelectorTemplateContext {\n    $implicit: IgxRowSelectorTemplateDetails;\n}\n\nexport interface IgxGroupByRowSelectorTemplateDetails {\n    selectedCount: number;\n    totalCount: number;\n    groupRow: IGroupByRecord;\n}\nexport interface IgxGroupByRowSelectorTemplateContext {\n    $implicit: IgxGroupByRowSelectorTemplateDetails;\n}\n\nexport interface IgxHeadSelectorTemplateDetails {\n    selectedCount: number;\n    totalCount: number;\n    selectAll?: () => void;\n    deselectAll?: () => void;\n}\nexport interface IgxHeadSelectorTemplateContext {\n    $implicit: IgxHeadSelectorTemplateDetails;\n}\n\nexport interface IgxSummaryTemplateContext {\n    $implicit: IgxSummaryResult[]\n}\n\n/**\n * An interface describing settings for row/column pinning position.\n */\nexport interface IPinningConfig {\n    columns?: ColumnPinningPosition;\n    rows?: RowPinningPosition;\n}\n\n/**\n * An interface describing settings for clipboard options\n */\nexport interface IClipboardOptions {\n    /**\n     * Enables/disables the copy behavior\n     */\n    enabled: boolean;\n    /**\n     * Include the columns headers in the clipboard output.\n     */\n    copyHeaders: boolean;\n    /**\n     * Apply the columns formatters (if any) on the data in the clipboard output.\n     */\n    copyFormatters: boolean;\n    /**\n     * The separator used for formatting the copy output. Defaults to `\\t`.\n     */\n    separator: string;\n}\n"]}