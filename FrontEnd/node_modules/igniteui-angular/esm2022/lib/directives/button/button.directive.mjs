import { Directive, EventEmitter, HostBinding, Input, Output, HostListener, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../../core/density';
import { mkenum } from '../../core/utils';
import * as i0 from "@angular/core";
const IgxButtonType = mkenum({
    Flat: 'flat',
    Raised: 'raised',
    Outlined: 'outlined',
    Icon: 'icon',
    FAB: 'fab'
});
/**
 * The Button directive provides the Ignite UI Button functionality to every component that's intended to be used as a button.
 *
 * @igxModule IgxButtonModule
 *
 * @igxParent Data Entry & Display
 *
 * @igxTheme igx-button-theme
 *
 * @igxKeywords button, span, div, click
 *
 * @remarks
 * The Ignite UI Button directive is intended to be used by any button, span or div and turn it into a fully functional button.
 *
 * @example
 * ```html
 * <button type="button" igxButton="outlined">A Button</button>
 * ```
 */
export class IgxButtonDirective extends DisplayDensityBase {
    /**
     * Gets or sets whether the button is selected.
     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.
     *
     * @example
     * ```html
     * <button type="button" igxButton="flat" [selected]="button.selected"></button>
     * ```
     */
    set selected(value) {
        if (this._selected !== value) {
            if (!this._selected) {
                this.buttonSelected.emit({
                    button: this
                });
            }
            this._selected = value;
        }
    }
    get selected() {
        return this._selected;
    }
    constructor(element, _renderer, _displayDensityOptions) {
        super(_displayDensityOptions, element);
        this.element = element;
        this._renderer = _renderer;
        this._displayDensityOptions = _displayDensityOptions;
        /**
         * Called when the button is clicked.
         */
        this.buttonClick = new EventEmitter();
        /**
         * Called when the button is selected.
         */
        this.buttonSelected = new EventEmitter();
        /**
         * Sets/gets the `role` attribute.
         *
         * @example
         * ```typescript
         * this.button.role = 'navbutton';
         * let buttonRole = this.button.role;
         * ```
         */
        this.role = 'button';
        /**
         * @hidden
         * @internal
         */
        this._cssClass = 'igx-button';
        /**
         * @hidden
         * @internal
         */
        this._disabled = false;
        /**
         * @hidden
         * @internal
         */
        this._selected = false;
    }
    /**
     * @hidden
     * @internal
     */
    onClick(ev) {
        this.buttonClick.emit(ev);
    }
    /**
     * Returns the underlying DOM element.
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * Sets the type of the button.
     *
     * @example
     * ```html
     * <button type="button" igxButton="icon"></button>
     * ```
     */
    set type(type) {
        const t = type ? type : IgxButtonType.Flat;
        if (this._type !== t) {
            this._type = t;
        }
    }
    /**
     * Sets the button text color.
     *
     * @example
     * ```html
     * <button type="button" igxButton igxButtonColor="orange"></button>
     * ```
     */
    set color(value) {
        this._color = value || this.nativeElement.style.color;
        this._renderer.setStyle(this.nativeElement, 'color', this._color);
    }
    /**
     * Sets the background color of the button.
     *
     * @example
     *  ```html
     * <button type="button" igxButton igxButtonBackground="red"></button>
     * ```
     */
    set background(value) {
        this._backgroundColor = value || this._backgroundColor;
        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);
    }
    /**
     * Sets the `aria-label` attribute.
     *
     * @example
     *  ```html
     * <button type="button" igxButton="flat" igxLabel="Label"></button>
     * ```
     */
    set label(value) {
        this._label = value || this._label;
        this._renderer.setAttribute(this.nativeElement, 'aria-label', this._label);
    }
    /**
     * Get the disabled state of the button;
     *
     * @example
     * ```typescript
     * const disabled = this.button.disabled;
     * ```
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Enables/disables the button.
     *
     * @example
     * ```html
     * <button type="button" igxButton="fab" [disabled]="true"></button>
     * ```
     */
    set disabled(val) {
        this._disabled = (val === '') || val;
    }
    /**
     * @hidden
     * @internal
     */
    get flat() {
        return this._type === IgxButtonType.Flat;
    }
    /**
     * @hidden
     * @internal
     */
    get raised() {
        return this._type === IgxButtonType.Raised;
    }
    /**
     * @hidden
     * @internal
     */
    get outlined() {
        return this._type === IgxButtonType.Outlined;
    }
    /**
     * @hidden
     * @internal
     */
    get icon() {
        return this._type === IgxButtonType.Icon;
    }
    /**
     * @hidden
     * @internal
     */
    get fab() {
        return this._type === IgxButtonType.FAB;
    }
    /**
     * @hidden
     * @internal
     */
    get componentSize() {
        return this.getComponentSizeStyles();
    }
    /**
     * @hidden
     * @internal
     */
    get disabledAttribute() {
        return this._disabled ? this._disabled : null;
    }
    /**
     * @hidden
     * @internal
     */
    select() {
        this.selected = true;
    }
    /**
     * @hidden
     * @internal
     */
    deselect() {
        this._selected = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxButtonDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DisplayDensityToken, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.8", type: IgxButtonDirective, isStandalone: true, selector: "[igxButton]", inputs: { selected: "selected", type: ["igxButton", "type"], color: ["igxButtonColor", "color"], background: ["igxButtonBackground", "background"], label: ["igxLabel", "label"], disabled: "disabled" }, outputs: { buttonClick: "buttonClick", buttonSelected: "buttonSelected" }, host: { listeners: { "click": "onClick($event)" }, properties: { "attr.role": "this.role", "class.igx-button": "this._cssClass", "class.igx-button--disabled": "this.disabled", "class.igx-button--flat": "this.flat", "class.igx-button--raised": "this.raised", "class.igx-button--outlined": "this.outlined", "class.igx-button--icon": "this.icon", "class.igx-button--fab": "this.fab", "style.--component-size": "this.componentSize", "attr.disabled": "this.disabledAttribute" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxButton]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }]; }, propDecorators: { buttonClick: [{
                type: Output
            }], buttonSelected: [{
                type: Output
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], _cssClass: [{
                type: HostBinding,
                args: ['class.igx-button']
            }], selected: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }], type: [{
                type: Input,
                args: ['igxButton']
            }], color: [{
                type: Input,
                args: ['igxButtonColor']
            }], background: [{
                type: Input,
                args: ['igxButtonBackground']
            }], label: [{
                type: Input,
                args: ['igxLabel']
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-button--disabled']
            }], flat: [{
                type: HostBinding,
                args: ['class.igx-button--flat']
            }], raised: [{
                type: HostBinding,
                args: ['class.igx-button--raised']
            }], outlined: [{
                type: HostBinding,
                args: ['class.igx-button--outlined']
            }], icon: [{
                type: HostBinding,
                args: ['class.igx-button--icon']
            }], fab: [{
                type: HostBinding,
                args: ['class.igx-button--fab']
            }], componentSize: [{
                type: HostBinding,
                args: ['style.--component-size']
            }], disabledAttribute: [{
                type: HostBinding,
                args: ['attr.disabled']
            }] } });
//# sourceMappingURL=data:application/json;base64,