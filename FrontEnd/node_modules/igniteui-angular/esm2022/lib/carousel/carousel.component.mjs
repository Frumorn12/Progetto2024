import { NgIf, NgClass, NgFor, NgTemplateOutlet } from '@angular/common';
import { Component, ContentChild, ContentChildren, EventEmitter, HostBinding, HostListener, Inject, Injectable, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';
import { merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { mkenum } from '../core/utils';
import { IgxAngularAnimationService } from '../services/animation/angular-animation-service';
import { Direction, HorizontalAnimationType, IgxCarouselComponentBase } from './carousel-base';
import { IgxCarouselIndicatorDirective, IgxCarouselNextButtonDirective, IgxCarouselPrevButtonDirective } from './carousel.directives';
import { IgxSlideComponent } from './slide.component';
import { IgxIconComponent } from '../icon/icon.component';
import * as i0 from "@angular/core";
import * as i1 from "../core/utils";
let NEXT_ID = 0;
export const CarouselIndicatorsOrientation = mkenum({
    bottom: 'bottom',
    top: 'top'
});
export class CarouselHammerConfig extends HammerGestureConfig {
    constructor() {
        super(...arguments);
        this.overrides = {
            pan: { direction: Hammer.DIRECTION_HORIZONTAL }
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: CarouselHammerConfig, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: CarouselHammerConfig }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: CarouselHammerConfig, decorators: [{
            type: Injectable
        }] });
/**
 * **Ignite UI for Angular Carousel** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)
 *
 * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom
 * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.
 * It can be used as a separate fullscreen element or inside another component.
 *
 * Example:
 * ```html
 * <igx-carousel>
 *   <igx-slide>
 *     <h3>First Slide Header</h3>
 *     <p>First slide Content</p>
 *   <igx-slide>
 *   <igx-slide>
 *     <h3>Second Slide Header</h3>
 *     <p>Second Slide Content</p>
 * </igx-carousel>
 * ```
 */
export class IgxCarouselComponent extends IgxCarouselComponentBase {
    /** @hidden */
    get labelId() {
        return this.showIndicatorsLabel ? `${this.id}-label` : null;
    }
    /**
     * Gets the `touch-action` style of the `list item`.
     * ```typescript
     * let touchAction = this.listItem.touchAction;
     * ```
     */
    get touchAction() {
        return this.gesturesSupport ? 'pan-y' : 'auto';
    }
    /**
     * An accessor that sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * An accessor that returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    /** @hidden */
    get getIndicatorTemplate() {
        if (this.indicatorTemplate) {
            return this.indicatorTemplate;
        }
        return this.defaultIndicator;
    }
    /** @hidden */
    get getNextButtonTemplate() {
        if (this.nextButtonTemplate) {
            return this.nextButtonTemplate;
        }
        return this.defaultNextButton;
    }
    /** @hidden */
    get getPrevButtonTemplate() {
        if (this.prevButtonTemplate) {
            return this.prevButtonTemplate;
        }
        return this.defaultPrevButton;
    }
    /** @hidden */
    get indicatorsOrientationClass() {
        return `igx-carousel-indicators--${this.indicatorsOrientation}`;
    }
    /** @hidden */
    get showIndicators() {
        return this.total <= this.maximumIndicatorsCount && this.total > 0;
    }
    /** @hidden */
    get showIndicatorsLabel() {
        return this.total > this.maximumIndicatorsCount;
    }
    /** @hidden */
    get getCarouselLabel() {
        return `${this.current + 1} ${this.resourceStrings.igx_carousel_of} ${this.total}`;
    }
    /**
     * Returns the total number of `slides` in the carousel.
     * ```typescript
     * let slideCount =  this.carousel.total;
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    get total() {
        return this.slides?.length;
    }
    /**
     * The index of the slide being currently shown.
     * ```typescript
     * let currentSlideNumber =  this.carousel.current;
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    get current() {
        return !this.currentItem ? 0 : this.currentItem.index;
    }
    /**
     * Returns a boolean indicating if the carousel is playing.
     * ```typescript
     * let isPlaying =  this.carousel.isPlaying;
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    get isPlaying() {
        return this.playing;
    }
    /**
     * Returns а boolean indicating if the carousel is destroyed.
     * ```typescript
     * let isDestroyed =  this.carousel.isDestroyed;
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    get isDestroyed() {
        return this.destroyed;
    }
    /**
     * Returns a reference to the carousel element in the DOM.
     * ```typescript
     * let nativeElement =  this.carousel.nativeElement;
     * ```
     *
     * @memberof IgxCarouselComponent
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * Returns the time `interval` in milliseconds before the slide changes.
     * ```typescript
     * let timeInterval = this.carousel.interval;
     * ```
     *
     * @memberof IgxCarouselComponent
     */
    get interval() {
        return this._interval;
    }
    /**
     * Sets the time `interval` in milliseconds before the slide changes.
     * If not set, the carousel will not change `slides` automatically.
     * ```html
     * <igx-carousel [interval] = "1000"></igx-carousel>
     * ```
     *
     * @memberof IgxCarouselComponent
     */
    set interval(value) {
        this._interval = +value;
        this.restartInterval();
    }
    constructor(cdr, element, iterableDiffers, animationService, platformUtil) {
        super(animationService, cdr);
        this.element = element;
        this.iterableDiffers = iterableDiffers;
        this.platformUtil = platformUtil;
        /**
         * Sets the `id` of the carousel.
         * If not set, the `id` of the first carousel component will be `"igx-carousel-0"`.
         * ```html
         * <igx-carousel id="my-first-carousel"></igx-carousel>
         * ```
         *
         * @memberof IgxCarouselComponent
         */
        this.id = `igx-carousel-${NEXT_ID++}`;
        /**
         * Returns the `role` attribute of the carousel.
         * ```typescript
         * let carouselRole =  this.carousel.role;
         * ```
         *
         * @memberof IgxCarouselComponent
         */
        this.role = 'region';
        /** @hidden */
        this.roleDescription = 'carousel';
        /**
         * Returns the class of the carousel component.
         * ```typescript
         * let class =  this.carousel.cssClass;
         * ```
         *
         * @memberof IgxCarouselComponent
         */
        this.cssClass = 'igx-carousel';
        /**
         * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.
         * Default value is `true`.
         * ```html
         * <igx-carousel [loop]="false"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.loop = true;
        /**
         * Sets whether the carousel will `pause` the slide transitions on user interactions.
         * Default value is `true`.
         * ```html
         *  <igx-carousel [pause]="false"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.pause = true;
        /**
         * Controls whether the carousel should render the left/right `navigation` buttons.
         * Default value is `true`.
         * ```html
         * <igx-carousel [navigation] = "false"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.navigation = true;
        /**
         * Controls whether the carousel should support keyboard navigation.
         * Default value is `true`.
         * ```html
         * <igx-carousel [keyboardSupport] = "false"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.keyboardSupport = true;
        /**
         * Controls whether the carousel should support gestures.
         * Default value is `true`.
         * ```html
         * <igx-carousel [gesturesSupport] = "false"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.gesturesSupport = true;
        /**
         * Controls the maximum indexes that can be shown.
         * Default value is `5`.
         * ```html
         * <igx-carousel [maximumIndicatorsCount] = "10"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.maximumIndicatorsCount = 5;
        /**
         * Gets/sets the display mode of carousel indicators. It can be top or bottom.
         * Default value is `bottom`.
         * ```html
         * <igx-carousel indicatorsOrientation='top'>
         * <igx-carousel>
         * ```
         *
         * @memberOf IgxSlideComponent
         */
        this.indicatorsOrientation = CarouselIndicatorsOrientation.bottom;
        /**
         * Gets/sets the animation type of carousel.
         * Default value is `slide`.
         * ```html
         * <igx-carousel animationType='none'>
         * <igx-carousel>
         * ```
         *
         * @memberOf IgxSlideComponent
         */
        this.animationType = HorizontalAnimationType.slide;
        /**
         * The custom template, if any, that should be used when rendering carousel indicators
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.carousel.indicatorTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-carousel #carousel>
         *      ...
         *      <ng-template igxCarouselIndicator let-slide>
         *         <igx-icon *ngIf="slide.active">brightness_7</igx-icon>
         *         <igx-icon *ngIf="!slide.active">brightness_5</igx-icon>
         *      </ng-template>
         *  </igx-carousel>
         * ```
         */
        this.indicatorTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering carousel next button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.carousel.nextButtonTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-carousel #carousel>
         *      ...
         *      <ng-template igxCarouselNextButton let-disabled>
         *          <button type="button" igxButton="fab" igxRipple="white" [disabled]="disabled">
         *              <igx-icon>add</igx-icon>
         *          </button>
         *      </ng-template>
         *  </igx-carousel>
         * ```
         */
        this.nextButtonTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering carousel previous button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.carousel.nextButtonTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-carousel #carousel>
         *      ...
         *      <ng-template igxCarouselPrevButton let-disabled>
         *          <button type="button" igxButton="fab" igxRipple="white" [disabled]="disabled">
         *              <igx-icon>remove</igx-icon>
         *          </button>
         *      </ng-template>
         *  </igx-carousel>
         * ```
         */
        this.prevButtonTemplate = null;
        /**
         * An event that is emitted after a slide transition has happened.
         * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.
         * ```html
         * <igx-carousel (slideChanged)="slideChanged($event)"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.slideChanged = new EventEmitter();
        /**
         * An event that is emitted after a slide has been added to the carousel.
         * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.
         * ```html
         * <igx-carousel (slideAdded)="slideAdded($event)"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.slideAdded = new EventEmitter();
        /**
         * An event that is emitted after a slide has been removed from the carousel.
         * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.
         * ```html
         * <igx-carousel (slideRemoved)="slideRemoved($event)"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.slideRemoved = new EventEmitter();
        /**
         * An event that is emitted after the carousel has been paused.
         * Provides a reference to the `IgxCarouselComponent` as an event argument.
         * ```html
         * <igx-carousel (carouselPaused)="carouselPaused($event)"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.carouselPaused = new EventEmitter();
        /**
         * An event that is emitted after the carousel has resumed transitioning between `slides`.
         * Provides a reference to the `IgxCarouselComponent` as an event argument.
         * ```html
         * <igx-carousel (carouselPlaying)="carouselPlaying($event)"></igx-carousel>
         * ```
         *
         * @memberOf IgxCarouselComponent
         */
        this.carouselPlaying = new EventEmitter();
        this._resourceStrings = CurrentResourceStrings.CarouselResStrings;
        this.destroy$ = new Subject();
        this.differ = null;
        this.differ = this.iterableDiffers.find([]).create(null);
    }
    /** @hidden */
    onKeydownArrowRight(event) {
        if (this.keyboardSupport) {
            event.preventDefault();
            this.next();
            this.focusSlideElement();
        }
    }
    /** @hidden */
    onKeydownArrowLeft(event) {
        if (this.keyboardSupport) {
            event.preventDefault();
            this.prev();
            this.focusSlideElement();
        }
    }
    /** @hidden */
    onTap(event) {
        // play pause only when tap on slide
        if (event.target && event.target.classList.contains('igx-slide')) {
            if (this.isPlaying) {
                if (this.pause) {
                    this.stoppedByInteraction = true;
                }
                this.stop();
            }
            else if (this.stoppedByInteraction) {
                this.play();
            }
        }
    }
    /** @hidden */
    onKeydownHome(event) {
        if (this.keyboardSupport && this.slides.length > 0) {
            event.preventDefault();
            this.slides.first.active = true;
            this.focusSlideElement();
        }
    }
    /** @hidden */
    onKeydownEnd(event) {
        if (this.keyboardSupport && this.slides.length > 0) {
            event.preventDefault();
            this.slides.last.active = true;
            this.focusSlideElement();
        }
    }
    /** @hidden */
    onMouseEnter() {
        if (this.pause && this.isPlaying) {
            this.stoppedByInteraction = true;
        }
        this.stop();
    }
    /** @hidden */
    onMouseLeave() {
        if (this.stoppedByInteraction) {
            this.play();
        }
    }
    /** @hidden */
    onPanLeft(event) {
        this.pan(event);
    }
    /** @hidden */
    onPanRight(event) {
        this.pan(event);
    }
    /**
     * @hidden
     */
    onPanEnd(event) {
        if (!this.gesturesSupport) {
            return;
        }
        event.preventDefault();
        const slideWidth = this.currentItem.nativeElement.offsetWidth;
        const panOffset = (slideWidth / 1000);
        const deltaX = Math.abs(event.deltaX) + panOffset < slideWidth ? Math.abs(event.deltaX) : slideWidth - panOffset;
        const velocity = Math.abs(event.velocity);
        this.resetSlideStyles(this.currentItem);
        if (this.incomingSlide) {
            this.resetSlideStyles(this.incomingSlide);
            if (slideWidth / 2 < deltaX || velocity > 1) {
                this.incomingSlide.direction = event.deltaX < 0 ? Direction.NEXT : Direction.PREV;
                this.incomingSlide.previous = false;
                this.animationPosition = this.animationType === HorizontalAnimationType.fade ?
                    deltaX / slideWidth : (slideWidth - deltaX) / slideWidth;
                if (velocity > 1) {
                    this.newDuration = this.defaultAnimationDuration / velocity;
                }
                this.incomingSlide.active = true;
            }
            else {
                this.currentItem.direction = event.deltaX > 0 ? Direction.NEXT : Direction.PREV;
                this.previousItem = this.incomingSlide;
                this.previousItem.previous = true;
                this.animationPosition = this.animationType === HorizontalAnimationType.fade ?
                    Math.abs((slideWidth - deltaX) / slideWidth) : deltaX / slideWidth;
                this.playAnimations();
            }
        }
        if (this.stoppedByInteraction) {
            this.play();
        }
    }
    /** @hidden */
    ngAfterContentInit() {
        this.slides.changes
            .pipe(takeUntil(this.destroy$))
            .subscribe((change) => this.initSlides(change));
        this.initSlides(this.slides);
    }
    /** @hidden */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
        this.destroyed = true;
        if (this.lastInterval) {
            clearInterval(this.lastInterval);
        }
    }
    /**
     * Returns the slide corresponding to the provided `index` or null.
     * ```typescript
     * let slide1 =  this.carousel.get(1);
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    get(index) {
        return this.slides.find((slide) => slide.index === index);
    }
    /**
     * Adds a new slide to the carousel.
     * ```typescript
     * this.carousel.add(newSlide);
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    add(slide) {
        const newSlides = this.slides.toArray();
        newSlides.push(slide);
        this.slides.reset(newSlides);
        this.slides.notifyOnChanges();
    }
    /**
     * Removes a slide from the carousel.
     * ```typescript
     * this.carousel.remove(slide);
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    remove(slide) {
        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel
            const newSlides = this.slides.toArray();
            newSlides.splice(slide.index, 1);
            this.slides.reset(newSlides);
            this.slides.notifyOnChanges();
        }
    }
    /**
     * Kicks in a transition for a given slide with a given `direction`.
     * ```typescript
     * this.carousel.select(this.carousel.get(2), Direction.NEXT);
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    select(slide, direction = Direction.NONE) {
        if (slide && slide !== this.currentItem) {
            slide.direction = direction;
            slide.active = true;
        }
    }
    /**
     * Transitions to the next slide in the carousel.
     * ```typescript
     * this.carousel.next();
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    next() {
        const index = this.getNextIndex();
        if (index === 0 && !this.loop) {
            this.stop();
            return;
        }
        return this.select(this.get(index), Direction.NEXT);
    }
    /**
     * Transitions to the previous slide in the carousel.
     * ```typescript
     * this.carousel.prev();
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    prev() {
        const index = this.getPrevIndex();
        if (!this.loop && index === this.total - 1) {
            this.stop();
            return;
        }
        return this.select(this.get(index), Direction.PREV);
    }
    /**
     * Resumes playing of the carousel if in paused state.
     * No operation otherwise.
     * ```typescript
     * this.carousel.play();
     * }
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    play() {
        if (!this.playing) {
            this.playing = true;
            this.carouselPlaying.emit(this);
            this.restartInterval();
            this.stoppedByInteraction = false;
        }
    }
    /**
     * Stops slide transitions if the `pause` option is set to `true`.
     * No operation otherwise.
     * ```typescript
     *  this.carousel.stop();
     * }
     * ```
     *
     * @memberOf IgxCarouselComponent
     */
    stop() {
        if (this.pause) {
            this.playing = false;
            this.carouselPaused.emit(this);
            this.resetInterval();
        }
    }
    getPreviousElement() {
        return this.previousItem.nativeElement;
    }
    getCurrentElement() {
        return this.currentItem.nativeElement;
    }
    resetInterval() {
        if (this.lastInterval) {
            clearInterval(this.lastInterval);
            this.lastInterval = null;
        }
    }
    restartInterval() {
        this.resetInterval();
        if (!isNaN(this.interval) && this.interval > 0 && this.platformUtil.isBrowser) {
            this.lastInterval = setInterval(() => {
                const tick = +this.interval;
                if (this.playing && this.total && !isNaN(tick) && tick > 0) {
                    this.next();
                }
                else {
                    this.stop();
                }
            }, this.interval);
        }
    }
    /** @hidden */
    get nextButtonDisabled() {
        return !this.loop && this.current === (this.total - 1);
    }
    /** @hidden */
    get prevButtonDisabled() {
        return !this.loop && this.current === 0;
    }
    getNextIndex() {
        return (this.current + 1) % this.total;
    }
    getPrevIndex() {
        return this.current - 1 < 0 ? this.total - 1 : this.current - 1;
    }
    resetSlideStyles(slide) {
        slide.nativeElement.style.transform = '';
        slide.nativeElement.style.opacity = '';
    }
    pan(event) {
        const slideWidth = this.currentItem.nativeElement.offsetWidth;
        const panOffset = (slideWidth / 1000);
        const deltaX = event.deltaX;
        const index = deltaX < 0 ? this.getNextIndex() : this.getPrevIndex();
        const offset = deltaX < 0 ? slideWidth + deltaX : -slideWidth + deltaX;
        if (!this.gesturesSupport || event.isFinal || Math.abs(deltaX) + panOffset >= slideWidth) {
            return;
        }
        if (!this.loop && ((this.current === 0 && deltaX > 0) || (this.current === this.total - 1 && deltaX < 0))) {
            this.incomingSlide = null;
            return;
        }
        event.preventDefault();
        if (this.isPlaying) {
            this.stoppedByInteraction = true;
            this.stop();
        }
        if (this.previousItem && this.previousItem.previous) {
            this.previousItem.previous = false;
        }
        this.finishAnimations();
        if (this.incomingSlide) {
            if (index !== this.incomingSlide.index) {
                this.resetSlideStyles(this.incomingSlide);
                this.incomingSlide.previous = false;
                this.incomingSlide = this.get(index);
            }
        }
        else {
            this.incomingSlide = this.get(index);
        }
        this.incomingSlide.previous = true;
        if (this.animationType === HorizontalAnimationType.fade) {
            this.currentItem.nativeElement.style.opacity = `${Math.abs(offset) / slideWidth}`;
        }
        else {
            this.currentItem.nativeElement.style.transform = `translateX(${deltaX}px)`;
            this.incomingSlide.nativeElement.style.transform = `translateX(${offset}px)`;
        }
    }
    unsubscriber(slide) {
        return merge(this.destroy$, slide.isDestroyed);
    }
    onSlideActivated(slide) {
        if (slide.active && slide !== this.currentItem) {
            if (slide.direction === Direction.NONE) {
                const newIndex = slide.index;
                slide.direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;
            }
            if (this.currentItem) {
                if (this.previousItem && this.previousItem.previous) {
                    this.previousItem.previous = false;
                }
                this.currentItem.direction = slide.direction;
                this.currentItem.active = false;
                this.previousItem = this.currentItem;
                this.currentItem = slide;
                this.triggerAnimations();
            }
            else {
                this.currentItem = slide;
            }
            this.slideChanged.emit({ carousel: this, slide });
            this.restartInterval();
        }
    }
    finishAnimations() {
        if (this.animationStarted(this.leaveAnimationPlayer)) {
            this.leaveAnimationPlayer.finish();
        }
        if (this.animationStarted(this.enterAnimationPlayer)) {
            this.enterAnimationPlayer.finish();
        }
    }
    initSlides(change) {
        const diff = this.differ.diff(change.toArray());
        if (diff) {
            this.slides.reduce((any, c, ind) => c.index = ind, 0); // reset slides indexes
            diff.forEachAddedItem((record) => {
                const slide = record.item;
                slide.total = this.total;
                this.slideAdded.emit({ carousel: this, slide });
                if (slide.active) {
                    this.currentItem = slide;
                }
                slide.activeChange.pipe(takeUntil(this.unsubscriber(slide))).subscribe(() => this.onSlideActivated(slide));
            });
            diff.forEachRemovedItem((record) => {
                const slide = record.item;
                this.slideRemoved.emit({ carousel: this, slide });
                if (slide.active) {
                    slide.active = false;
                    this.currentItem = this.get(slide.index < this.total ? slide.index : this.total - 1);
                }
            });
            this.updateSlidesSelection();
        }
    }
    updateSlidesSelection() {
        if (this.platformUtil.isBrowser) {
            requestAnimationFrame(() => {
                if (this.currentItem) {
                    this.currentItem.active = true;
                    const activeSlides = this.slides.filter(slide => slide.active && slide.index !== this.currentItem.index);
                    activeSlides.forEach(slide => slide.active = false);
                }
                else if (this.total) {
                    this.slides.first.active = true;
                }
                this.play();
            });
        }
    }
    focusSlideElement() {
        if (this.leaveAnimationPlayer) {
            this.leaveAnimationPlayer.animationEnd
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                this.slides.find(s => s.active).nativeElement.focus();
            });
        }
        else {
            requestAnimationFrame(() => this.slides.find(s => s.active).nativeElement.focus());
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxCarouselComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.IterableDiffers }, { token: IgxAngularAnimationService }, { token: i1.PlatformUtil }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.8", type: IgxCarouselComponent, isStandalone: true, selector: "igx-carousel", inputs: { id: "id", loop: "loop", pause: "pause", navigation: "navigation", keyboardSupport: "keyboardSupport", gesturesSupport: "gesturesSupport", maximumIndicatorsCount: "maximumIndicatorsCount", indicatorsOrientation: "indicatorsOrientation", animationType: "animationType", resourceStrings: "resourceStrings", interval: "interval" }, outputs: { slideChanged: "slideChanged", slideAdded: "slideAdded", slideRemoved: "slideRemoved", carouselPaused: "carouselPaused", carouselPlaying: "carouselPlaying" }, host: { listeners: { "keydown.arrowright": "onKeydownArrowRight($event)", "keydown.arrowleft": "onKeydownArrowLeft($event)", "tap": "onTap($event)", "keydown.home": "onKeydownHome($event)", "keydown.end": "onKeydownEnd($event)", "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()", "panleft": "onPanLeft($event)", "panright": "onPanRight($event)", "panend": "onPanEnd($event)" }, properties: { "attr.id": "this.id", "attr.role": "this.role", "attr.aria-roledescription": "this.roleDescription", "attr.aria-labelledby": "this.labelId", "class.igx-carousel": "this.cssClass", "style.touch-action": "this.touchAction" } }, providers: [
            {
                provide: HAMMER_GESTURE_CONFIG,
                useClass: CarouselHammerConfig
            }
        ], queries: [{ propertyName: "indicatorTemplate", first: true, predicate: IgxCarouselIndicatorDirective, descendants: true, read: TemplateRef }, { propertyName: "nextButtonTemplate", first: true, predicate: IgxCarouselNextButtonDirective, descendants: true, read: TemplateRef }, { propertyName: "prevButtonTemplate", first: true, predicate: IgxCarouselPrevButtonDirective, descendants: true, read: TemplateRef }, { propertyName: "slides", predicate: IgxSlideComponent }], viewQueries: [{ propertyName: "defaultIndicator", first: true, predicate: ["defaultIndicator"], descendants: true, read: TemplateRef, static: true }, { propertyName: "defaultNextButton", first: true, predicate: ["defaultNextButton"], descendants: true, read: TemplateRef, static: true }, { propertyName: "defaultPrevButton", first: true, predicate: ["defaultPrevButton"], descendants: true, read: TemplateRef, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultIndicator let-slide>\n    <div class=\"igx-nav-dot\"\n        [class.igx-nav-dot--active]=\"slide.active\">\n    </div>\n</ng-template>\n\n<ng-template #defaultNextButton let-disabled>\n    <span class=\"igx-nav-arrow\"\n          [class.igx-nav-arrow--disabled]=\"disabled\">\n        <igx-icon>arrow_forward</igx-icon>\n    </span>\n</ng-template>\n\n<ng-template #defaultPrevButton let-disabled>\n    <span class=\"igx-nav-arrow\"\n          [class.igx-nav-arrow--disabled]=\"disabled\">\n        <igx-icon>arrow_back</igx-icon>\n    </span>\n</ng-template>\n\n<div *ngIf=\"showIndicators\" [ngClass]=\"indicatorsOrientationClass\" [attr.role]=\"'tablist'\">\n    <div *ngFor=\"let slide of slides\"\n        class=\"igx-carousel-indicators__indicator\"\n        (click)=\"select(slide)\"\n        [id]=\"'tab-'+ slide.index + '-' + total\"\n        [attr.role]=\"'tab'\"\n        [attr.aria-label]=\"resourceStrings.igx_carousel_slide + ' ' + (slide.index + 1) + ' ' + resourceStrings.igx_carousel_of + ' ' + this.total\"\n        [attr.aria-controls]=\"'panel-' + slide.index\"\n        [attr.aria-selected]=\"slide.active\">\n        <ng-container *ngTemplateOutlet=\"getIndicatorTemplate; context: {$implicit: slide};\"></ng-container>\n    </div>\n</div>\n\n<div *ngIf=\"showIndicatorsLabel\" [ngClass]=\"indicatorsOrientationClass\">\n    <span [id]=\"labelId\" class=\"igx-carousel__label\">{{getCarouselLabel}}</span>\n</div>\n\n<div class=\"igx-carousel__inner\" [attr.aria-live]=\"!interval || stoppedByInteraction ? 'polite' : 'off'\">\n    <ng-content></ng-content>\n</div>\n\n<div *ngIf=\"navigation && slides.length\" role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--prev\" [attr.aria-label]=\"resourceStrings.igx_carousel_previous_slide\" (keydown.enter)=\"prev()\" (click)=\"prev()\">\n    <ng-container *ngTemplateOutlet=\"getPrevButtonTemplate; context: {$implicit: prevButtonDisabled};\"></ng-container>\n</div>\n\n<div *ngIf=\"navigation && slides.length\" role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--next\" [attr.aria-label]=\"resourceStrings.igx_carousel_next_slide\" (keydown.enter)=\"next()\" (click)=\"next()\">\n    <ng-container *ngTemplateOutlet=\"getNextButtonTemplate; context: {$implicit: nextButtonDisabled};\"></ng-container>\n</div>\n\n\n\n", styles: [":host{display:block;outline-style:none}\n"], dependencies: [{ kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxCarouselComponent, decorators: [{
            type: Component,
            args: [{ providers: [
                        {
                            provide: HAMMER_GESTURE_CONFIG,
                            useClass: CarouselHammerConfig
                        }
                    ], selector: 'igx-carousel', standalone: true, imports: [IgxIconComponent, NgIf, NgClass, NgFor, NgTemplateOutlet], template: "<ng-template #defaultIndicator let-slide>\n    <div class=\"igx-nav-dot\"\n        [class.igx-nav-dot--active]=\"slide.active\">\n    </div>\n</ng-template>\n\n<ng-template #defaultNextButton let-disabled>\n    <span class=\"igx-nav-arrow\"\n          [class.igx-nav-arrow--disabled]=\"disabled\">\n        <igx-icon>arrow_forward</igx-icon>\n    </span>\n</ng-template>\n\n<ng-template #defaultPrevButton let-disabled>\n    <span class=\"igx-nav-arrow\"\n          [class.igx-nav-arrow--disabled]=\"disabled\">\n        <igx-icon>arrow_back</igx-icon>\n    </span>\n</ng-template>\n\n<div *ngIf=\"showIndicators\" [ngClass]=\"indicatorsOrientationClass\" [attr.role]=\"'tablist'\">\n    <div *ngFor=\"let slide of slides\"\n        class=\"igx-carousel-indicators__indicator\"\n        (click)=\"select(slide)\"\n        [id]=\"'tab-'+ slide.index + '-' + total\"\n        [attr.role]=\"'tab'\"\n        [attr.aria-label]=\"resourceStrings.igx_carousel_slide + ' ' + (slide.index + 1) + ' ' + resourceStrings.igx_carousel_of + ' ' + this.total\"\n        [attr.aria-controls]=\"'panel-' + slide.index\"\n        [attr.aria-selected]=\"slide.active\">\n        <ng-container *ngTemplateOutlet=\"getIndicatorTemplate; context: {$implicit: slide};\"></ng-container>\n    </div>\n</div>\n\n<div *ngIf=\"showIndicatorsLabel\" [ngClass]=\"indicatorsOrientationClass\">\n    <span [id]=\"labelId\" class=\"igx-carousel__label\">{{getCarouselLabel}}</span>\n</div>\n\n<div class=\"igx-carousel__inner\" [attr.aria-live]=\"!interval || stoppedByInteraction ? 'polite' : 'off'\">\n    <ng-content></ng-content>\n</div>\n\n<div *ngIf=\"navigation && slides.length\" role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--prev\" [attr.aria-label]=\"resourceStrings.igx_carousel_previous_slide\" (keydown.enter)=\"prev()\" (click)=\"prev()\">\n    <ng-container *ngTemplateOutlet=\"getPrevButtonTemplate; context: {$implicit: prevButtonDisabled};\"></ng-container>\n</div>\n\n<div *ngIf=\"navigation && slides.length\" role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--next\" [attr.aria-label]=\"resourceStrings.igx_carousel_next_slide\" (keydown.enter)=\"next()\" (click)=\"next()\">\n    <ng-container *ngTemplateOutlet=\"getNextButtonTemplate; context: {$implicit: nextButtonDisabled};\"></ng-container>\n</div>\n\n\n\n", styles: [":host{display:block;outline-style:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IgxAngularAnimationService]
                }] }, { type: i1.PlatformUtil }]; }, propDecorators: { id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], roleDescription: [{
                type: HostBinding,
                args: ['attr.aria-roledescription']
            }], labelId: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-carousel']
            }], touchAction: [{
                type: HostBinding,
                args: ['style.touch-action']
            }], loop: [{
                type: Input
            }], pause: [{
                type: Input
            }], navigation: [{
                type: Input
            }], keyboardSupport: [{
                type: Input
            }], gesturesSupport: [{
                type: Input
            }], maximumIndicatorsCount: [{
                type: Input
            }], indicatorsOrientation: [{
                type: Input
            }], animationType: [{
                type: Input
            }], indicatorTemplate: [{
                type: ContentChild,
                args: [IgxCarouselIndicatorDirective, { read: TemplateRef, static: false }]
            }], nextButtonTemplate: [{
                type: ContentChild,
                args: [IgxCarouselNextButtonDirective, { read: TemplateRef, static: false }]
            }], prevButtonTemplate: [{
                type: ContentChild,
                args: [IgxCarouselPrevButtonDirective, { read: TemplateRef, static: false }]
            }], slides: [{
                type: ContentChildren,
                args: [IgxSlideComponent]
            }], slideChanged: [{
                type: Output
            }], slideAdded: [{
                type: Output
            }], slideRemoved: [{
                type: Output
            }], carouselPaused: [{
                type: Output
            }], carouselPlaying: [{
                type: Output
            }], defaultIndicator: [{
                type: ViewChild,
                args: ['defaultIndicator', { read: TemplateRef, static: true }]
            }], defaultNextButton: [{
                type: ViewChild,
                args: ['defaultNextButton', { read: TemplateRef, static: true }]
            }], defaultPrevButton: [{
                type: ViewChild,
                args: ['defaultPrevButton', { read: TemplateRef, static: true }]
            }], resourceStrings: [{
                type: Input
            }], interval: [{
                type: Input
            }], onKeydownArrowRight: [{
                type: HostListener,
                args: ['keydown.arrowright', ['$event']]
            }], onKeydownArrowLeft: [{
                type: HostListener,
                args: ['keydown.arrowleft', ['$event']]
            }], onTap: [{
                type: HostListener,
                args: ['tap', ['$event']]
            }], onKeydownHome: [{
                type: HostListener,
                args: ['keydown.home', ['$event']]
            }], onKeydownEnd: [{
                type: HostListener,
                args: ['keydown.end', ['$event']]
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], onPanLeft: [{
                type: HostListener,
                args: ['panleft', ['$event']]
            }], onPanRight: [{
                type: HostListener,
                args: ['panright', ['$event']]
            }], onPanEnd: [{
                type: HostListener,
                args: ['panend', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,