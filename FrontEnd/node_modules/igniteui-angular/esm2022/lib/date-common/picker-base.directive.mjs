import { ContentChildren, Directive, EventEmitter, Inject, Input, LOCALE_ID, Optional, Output, ViewChild } from '@angular/core';
import { getLocaleFirstDayOfWeek } from "@angular/common";
import { merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { IgxPickerToggleComponent } from './picker-icons.common';
import { PickerInteractionMode } from './types';
import { IGX_INPUT_GROUP_TYPE } from '../input-group/inputGroupType';
import { IgxPrefixDirective } from '../directives/prefix/prefix.directive';
import { IgxSuffixDirective } from '../directives/suffix/suffix.directive';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import * as i0 from "@angular/core";
export class PickerBaseDirective extends DisplayDensityBase {
    /**
     * @example
     * ```html
     * <igx-date-picker locale="jp"></igx-date-picker>
     * ```
     */
    /**
     * Gets the `locale` of the date-picker.
     * If not set, defaults to applciation's locale..
     */
    get locale() {
        return this._locale;
    }
    /**
     * Sets the `locale` of the date-picker.
     * Expects a valid BCP 47 language tag.
     */
    set locale(value) {
        this._locale = value;
        // if value is invalid, set it back to _localeId
        try {
            getLocaleFirstDayOfWeek(this._locale);
        }
        catch (e) {
            this._locale = this._localeId;
        }
    }
    /**
     * Gets the start day of the week.
     * Can return a numeric or an enum representation of the week day.
     * If not set, defaults to the first day of the week for the application locale.
     */
    get weekStart() {
        return this._weekStart ?? getLocaleFirstDayOfWeek(this._locale);
    }
    /**
     * Sets the start day of the week.
     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
     */
    set weekStart(value) {
        this._weekStart = value;
    }
    /**
     * Determines how the picker's input will be styled.
     *
     * @remarks
     * Default is `box`.
     *
     * @example
     * ```html
     * <igx-date-picker [type]="'line'"></igx-date-picker>
     * ```
     */
    set type(val) {
        this._type = val;
    }
    get type() {
        return this._type || this._inputGroupType;
    }
    /**
     * Gets the picker's pop-up state.
     *
     * @example
     * ```typescript
     * const state = this.picker.collapsed;
     * ```
     */
    get collapsed() {
        return this._collapsed;
    }
    /** @hidden @internal */
    get isDropdown() {
        return this.mode === PickerInteractionMode.DropDown;
    }
    constructor(element, _localeId, _displayDensityOptions, _inputGroupType) {
        super(_displayDensityOptions || { displayDensity: 'comfortable' }, element);
        this.element = element;
        this._localeId = _localeId;
        this._displayDensityOptions = _displayDensityOptions;
        this._inputGroupType = _inputGroupType;
        /**
         * Sets the `placeholder` of the picker's input.
         *
         * @example
         * ```html
         * <igx-date-picker [placeholder]="'Choose your date'"></igx-date-picker>
         * ```
         */
        this.placeholder = '';
        /**
         * Can be `dropdown` with editable input field or `dialog` with readonly input field.
         *
         * @remarks
         * Default mode is `dropdown`
         *
         * @example
         * ```html
         * <igx-date-picker mode="dialog"></igx-date-picker>
         * ```
         */
        this.mode = PickerInteractionMode.DropDown;
        /**
         * Enables or disables the picker.
         *
         * @example
         * ```html
         * <igx-date-picker [disabled]="'true'"></igx-date-picker>
         * ```
         */
        this.disabled = false;
        /**
         * Emitted when the calendar has started opening, cancelable.
         *
         * @example
         * ```html
         * <igx-date-picker (opening)="handleOpening($event)"></igx-date-picker>
         * ```
         */
        this.opening = new EventEmitter();
        /**
         * Emitted after the calendar has opened.
         *
         * @example
         * ```html
         * <igx-date-picker (opened)="handleOpened($event)"></igx-date-picker>
         * ```
         */
        this.opened = new EventEmitter();
        /**
         * Emitted when the calendar has started closing, cancelable.
         *
         * @example
         * ```html
         * <igx-date-picker (closing)="handleClosing($event)"></igx-date-picker>
         * ```
         */
        this.closing = new EventEmitter();
        /**
         * Emitted after the calendar has closed.
         *
         * @example
         * ```html
         * <igx-date-picker (closed)="handleClosed($event)"></igx-date-picker>
         * ```
         */
        this.closed = new EventEmitter();
        this._collapsed = true;
        this._destroy$ = new Subject();
        this.locale = this.locale || this._localeId;
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        this.subToIconsClicked(this.toggleComponents, () => this.open());
        this.toggleComponents.changes.pipe(takeUntil(this._destroy$))
            .subscribe(() => this.subToIconsClicked(this.toggleComponents, () => this.open()));
    }
    /** @hidden @internal */
    ngAfterContentChecked() {
        if (this.inputGroup && this.prefixes?.length > 0) {
            this.inputGroup.prefixes = this.prefixes;
        }
        if (this.inputGroup && this.suffixes?.length > 0) {
            this.inputGroup.suffixes = this.suffixes;
        }
    }
    /** @hidden @internal */
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    /** Subscribes to the click events of toggle/clear icons in a query */
    subToIconsClicked(components, next) {
        components.forEach(toggle => {
            toggle.clicked
                .pipe(takeUntil(merge(components.changes, this._destroy$)))
                .subscribe(next);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: PickerBaseDirective, deps: [{ token: i0.ElementRef }, { token: LOCALE_ID }, { token: DisplayDensityToken, optional: true }, { token: IGX_INPUT_GROUP_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.8", type: PickerBaseDirective, inputs: { inputFormat: "inputFormat", displayFormat: "displayFormat", placeholder: "placeholder", mode: "mode", overlaySettings: "overlaySettings", disabled: "disabled", locale: "locale", weekStart: "weekStart", outlet: "outlet", type: "type", tabIndex: "tabIndex" }, outputs: { opening: "opening", opened: "opened", closing: "closing", closed: "closed" }, queries: [{ propertyName: "toggleComponents", predicate: IgxPickerToggleComponent, descendants: true }, { propertyName: "prefixes", predicate: IgxPrefixDirective, descendants: true }, { propertyName: "suffixes", predicate: IgxSuffixDirective, descendants: true }], viewQueries: [{ propertyName: "inputGroup", first: true, predicate: IgxInputGroupComponent, descendants: true }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: PickerBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IGX_INPUT_GROUP_TYPE]
                }] }]; }, propDecorators: { inputFormat: [{
                type: Input
            }], displayFormat: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], mode: [{
                type: Input
            }], overlaySettings: [{
                type: Input
            }], disabled: [{
                type: Input
            }], locale: [{
                type: Input
            }], weekStart: [{
                type: Input
            }], outlet: [{
                type: Input
            }], type: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], opening: [{
                type: Output
            }], opened: [{
                type: Output
            }], closing: [{
                type: Output
            }], closed: [{
                type: Output
            }], toggleComponents: [{
                type: ContentChildren,
                args: [IgxPickerToggleComponent, { descendants: true }]
            }], prefixes: [{
                type: ContentChildren,
                args: [IgxPrefixDirective, { descendants: true }]
            }], suffixes: [{
                type: ContentChildren,
                args: [IgxSuffixDirective, { descendants: true }]
            }], inputGroup: [{
                type: ViewChild,
                args: [IgxInputGroupComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,