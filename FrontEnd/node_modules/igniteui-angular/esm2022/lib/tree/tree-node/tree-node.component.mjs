import { Component, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Optional, Output, SkipSelf, TemplateRef, ViewChild } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { DisplayDensity } from '../../core/density';
import { CurrentResourceStrings } from '../../core/i18n/resources';
import { ToggleAnimationPlayer } from '../../expansion-panel/toggle-animation-component';
import { IgxAngularAnimationService } from '../../services/animation/angular-animation-service';
import { IgxTreeSelectionType, IGX_TREE_COMPONENT, IGX_TREE_NODE_COMPONENT } from '../common';
import { IgxCircularProgressBarComponent } from '../../progressbar/progressbar.component';
import { IgxCheckboxComponent } from '../../checkbox/checkbox.component';
import { IgxIconComponent } from '../../icon/icon.component';
import { NgTemplateOutlet, NgIf, NgClass, NgFor } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../tree-navigation.service";
import * as i2 from "../tree-selection.service";
import * as i3 from "../tree.service";
// TODO: Implement aria functionality
/**
 * @hidden @internal
 * Used for links (`a` tags) in the body of an `igx-tree-node`. Handles aria and event dispatch.
 */
export class IgxTreeNodeLinkDirective {
    /**
     * The node's parent. Should be used only when the link is defined
     * in `<ng-template>` tag outside of its parent, as Angular DI will not properly provide a reference
     *
     * ```html
     * <igx-tree>
     *     <igx-tree-node #myNode *ngFor="let node of data" [data]="node">
     *         <ng-template *ngTemplateOutlet="nodeTemplate; context: { $implicit: data, parentNode: myNode }">
     *         </ng-template>
     *     </igx-tree-node>
     *     ...
     *     <!-- node template is defined under tree to access related services -->
     *     <ng-template #nodeTemplate let-data let-node="parentNode">
     *         <a [igxTreeNodeLink]="node">{{ data.label }}</a>
     *     </ng-template>
     * </igx-tree>
     * ```
     */
    set parentNode(val) {
        if (val) {
            this._parentNode = val;
            this._parentNode.addLinkChild(this);
        }
    }
    get parentNode() {
        return this._parentNode;
    }
    /** A pointer to the parent node */
    get target() {
        return this.node || this.parentNode;
    }
    constructor(node, navService, elementRef) {
        this.node = node;
        this.navService = navService;
        this.elementRef = elementRef;
        this.role = 'treeitem';
        this._parentNode = null;
    }
    /** @hidden @internal */
    get tabIndex() {
        return this.navService.focusedNode === this.target ? (this.target?.disabled ? -1 : 0) : -1;
    }
    /**
     * @hidden @internal
     * Clear the node's focused state
     */
    handleBlur() {
        this.target.isFocused = false;
    }
    /**
     * @hidden @internal
     * Set the node as focused
     */
    handleFocus() {
        if (this.target && !this.target.disabled) {
            if (this.navService.focusedNode !== this.target) {
                this.navService.focusedNode = this.target;
            }
            this.target.isFocused = true;
        }
    }
    ngOnDestroy() {
        this.target.removeLinkChild(this);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxTreeNodeLinkDirective, deps: [{ token: IGX_TREE_NODE_COMPONENT, optional: true }, { token: i1.IgxTreeNavigationService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.8", type: IgxTreeNodeLinkDirective, isStandalone: true, selector: "[igxTreeNodeLink]", inputs: { parentNode: ["igxTreeNodeLink", "parentNode"] }, host: { listeners: { "blur": "handleBlur()", "focus": "handleFocus()" }, properties: { "attr.role": "this.role", "attr.tabindex": "this.tabIndex" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxTreeNodeLinkDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[igxTreeNodeLink]`,
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IGX_TREE_NODE_COMPONENT]
                }] }, { type: i1.IgxTreeNavigationService }, { type: i0.ElementRef }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], parentNode: [{
                type: Input,
                args: ['igxTreeNodeLink']
            }], tabIndex: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }], handleBlur: [{
                type: HostListener,
                args: ['blur']
            }], handleFocus: [{
                type: HostListener,
                args: ['focus']
            }] } });
/**
 *
 * The tree node component represents a child node of the tree component or another tree node.
 * Usage:
 *
 * ```html
 *  <igx-tree>
 *  ...
 *    <igx-tree-node [data]="data" [selected]="service.isNodeSelected(data.Key)" [expanded]="service.isNodeExpanded(data.Key)">
 *      {{ data.FirstName }} {{ data.LastName }}
 *    </igx-tree-node>
 *  ...
 *  </igx-tree>
 * ```
 */
export class IgxTreeNodeComponent extends ToggleAnimationPlayer {
    // TO DO: return different tab index depending on anchor child
    /** @hidden @internal */
    set tabIndex(val) {
        this._tabIndex = val;
    }
    /** @hidden @internal */
    get tabIndex() {
        if (this.disabled) {
            return -1;
        }
        if (this._tabIndex === null) {
            if (this.navService.focusedNode === null) {
                return this.hasLinkChildren ? -1 : 0;
            }
            return -1;
        }
        return this.hasLinkChildren ? -1 : this._tabIndex;
    }
    /** @hidden @internal */
    get animationSettings() {
        return this.tree.animationSettings;
    }
    /**
     * Gets/Sets the resource strings.
     *
     * @remarks
     * Uses EN resources by default.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * An accessor that returns the resource strings.
     */
    get resourceStrings() {
        if (!this._resourceStrings) {
            this._resourceStrings = CurrentResourceStrings.TreeResStrings;
        }
        return this._resourceStrings;
    }
    /**
     * Gets/Sets the active state of the node
     *
     * @param value: boolean
     */
    set active(value) {
        if (value) {
            this.navService.activeNode = this;
            this.tree.activeNodeBindingChange.emit(this);
        }
    }
    get active() {
        return this.navService.activeNode === this;
    }
    /** @hidden @internal */
    get focused() {
        return this.isFocused &&
            this.navService.focusedNode === this;
    }
    /**
     * Retrieves the full path to the node incuding itself
     *
     * ```typescript
     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];
     * const path: IgxTreeNode<any>[] = node.path;
     * ```
     */
    get path() {
        return this.parentNode?.path ? [...this.parentNode.path, this] : [this];
    }
    // TODO: bind to disabled state when node is dragged
    /**
     * Gets/Sets the disabled state of the node
     *
     * @param value: boolean
     */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (value !== this._disabled) {
            this._disabled = value;
            this.tree.disabledChange.emit(this);
        }
    }
    get size() {
        switch (this.tree.displayDensity) {
            case DisplayDensity.compact:
                return 'var(--ig-size, var(--ig-size-small))';
            case DisplayDensity.cosy:
                return 'var(--ig-size, var(--ig-size-medium))';
            case DisplayDensity.comfortable:
            default:
                return 'var(--ig-size, var(--ig-size-large))';
        }
    }
    /** @hidden @internal */
    get role() {
        return this.hasLinkChildren ? 'none' : 'treeitem';
    }
    /**
     * Return the child nodes of the node (if any)
     *
     * @remark
     * Returns `null` if node does not have children
     *
     * @example
     * ```typescript
     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];
     * const children: IgxTreeNode<any>[] = node.children;
     * ```
     */
    get children() {
        return this._children?.length ? this._children.toArray() : null;
    }
    get hasLinkChildren() {
        return this.linkChildren?.length > 0 || this.registeredChildren?.length > 0;
    }
    /** @hidden @internal */
    get isCompact() {
        return this.tree?.displayDensity === DisplayDensity.compact;
    }
    /** @hidden @internal */
    get isCosy() {
        return this.tree?.displayDensity === DisplayDensity.cosy;
    }
    constructor(tree, selectionService, treeService, navService, cdr, animationService, element, parentNode) {
        super(animationService);
        this.tree = tree;
        this.selectionService = selectionService;
        this.treeService = treeService;
        this.navService = navService;
        this.cdr = cdr;
        this.element = element;
        this.parentNode = parentNode;
        /**
         * To be used for load-on-demand scenarios in order to specify whether the node is loading data.
         *
         * @remarks
         * Loading nodes do not render children.
         */
        this.loading = false;
        /**
         * Emitted when the node's `selected` property changes.
         *
         * ```html
         * <igx-tree>
         *      <igx-tree-node *ngFor="let node of data" [data]="node" [(selected)]="node.selected">
         *      </igx-tree-node>
         * </igx-tree>
         * ```
         *
         * ```typescript
         * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];
         * node.selectedChange.pipe(takeUntil(this.destroy$)).subscribe((e: boolean) => console.log("Node selection changed to ", e))
         * ```
         */
        this.selectedChange = new EventEmitter();
        /**
         * Emitted when the node's `expanded` property changes.
         *
         * ```html
         * <igx-tree>
         *      <igx-tree-node *ngFor="let node of data" [data]="node" [(expanded)]="node.expanded">
         *      </igx-tree-node>
         * </igx-tree>
         * ```
         *
         * ```typescript
         * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];
         * node.expandedChange.pipe(takeUntil(this.destroy$)).subscribe((e: boolean) => console.log("Node expansion state changed to ", e))
         * ```
         */
        this.expandedChange = new EventEmitter();
        /** @hidden @internal */
        this.cssClass = 'igx-tree-node';
        /** @hidden @internal */
        this.registeredChildren = [];
        /** @hidden @internal */
        this._resourceStrings = CurrentResourceStrings.TreeResStrings;
        this._tabIndex = null;
        this._disabled = false;
    }
    /**
     * @hidden @internal
     */
    get showSelectors() {
        return this.tree.selection !== IgxTreeSelectionType.None;
    }
    /**
     * @hidden @internal
     */
    get indeterminate() {
        return this.selectionService.isNodeIndeterminate(this);
    }
    /** The depth of the node, relative to the root
     *
     * ```html
     * <igx-tree>
     *  ...
     *  <igx-tree-node #node>
     *      My level is {{ node.level }}
     *  </igx-tree-node>
     * </igx-tree>
     * ```
     *
     * ```typescript
     * const node: IgxTreeNode<any> = this.tree.findNodes(data[12])[0];
     * const level: number = node.level;
     * ```
     */
    get level() {
        return this.parentNode ? this.parentNode.level + 1 : 0;
    }
    /** Get/set whether the node is selected. Supporst two-way binding.
     *
     * ```html
     * <igx-tree>
     *  ...
     *  <igx-tree-node *ngFor="let node of data" [(selected)]="node.selected">
     *      {{ node.label }}
     *  </igx-tree-node>
     * </igx-tree>
     * ```
     *
     * ```typescript
     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];
     * const selected = node.selected;
     * node.selected = true;
     * ```
     */
    get selected() {
        return this.selectionService.isNodeSelected(this);
    }
    set selected(val) {
        if (!(this.tree?.nodes && this.tree.nodes.find((e) => e === this)) && val) {
            this.tree.forceSelect.push(this);
            return;
        }
        if (val && !this.selectionService.isNodeSelected(this)) {
            this.selectionService.selectNodesWithNoEvent([this]);
        }
        if (!val && this.selectionService.isNodeSelected(this)) {
            this.selectionService.deselectNodesWithNoEvent([this]);
        }
    }
    /** Get/set whether the node is expanded
     *
     * ```html
     * <igx-tree>
     *  ...
     *  <igx-tree-node *ngFor="let node of data" [expanded]="node.name === this.expandedNode">
     *      {{ node.label }}
     *  </igx-tree-node>
     * </igx-tree>
     * ```
     *
     * ```typescript
     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];
     * const expanded = node.expanded;
     * node.expanded = true;
     * ```
     */
    get expanded() {
        return this.treeService.isExpanded(this);
    }
    set expanded(val) {
        if (val) {
            this.treeService.expand(this, false);
        }
        else {
            this.treeService.collapse(this);
        }
    }
    /** @hidden @internal */
    get expandIndicatorTemplate() {
        return this.tree?.expandIndicator || this._defaultExpandIndicatorTemplate;
    }
    /**
     * The native DOM element representing the node. Could be null in certain environments.
     *
     * ```typescript
     * // get the nativeElement of the second node
     * const node: IgxTreeNode = this.tree.nodes.first();
     * const nodeElement: HTMLElement = node.nativeElement;
     * ```
     */
    /** @hidden @internal */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /** @hidden @internal */
    ngOnInit() {
        this.openAnimationDone.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.tree.nodeExpanded.emit({ owner: this.tree, node: this });
        });
        this.closeAnimationDone.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.tree.nodeCollapsed.emit({ owner: this.tree, node: this });
            this.treeService.collapse(this);
            this.cdr.markForCheck();
        });
    }
    /**
     * @hidden @internal
     * Sets the focus to the node's <a> child, if present
     * Sets the node as the tree service's focusedNode
     * Marks the node as the current active element
     */
    handleFocus() {
        if (this.disabled) {
            return;
        }
        if (this.navService.focusedNode !== this) {
            this.navService.focusedNode = this;
        }
        this.isFocused = true;
        if (this.linkChildren?.length) {
            this.linkChildren.first.nativeElement.focus();
            return;
        }
        if (this.registeredChildren.length) {
            this.registeredChildren[0].elementRef.nativeElement.focus();
            return;
        }
    }
    /**
     * @hidden @internal
     * Clear the node's focused status
     */
    clearFocus() {
        this.isFocused = false;
    }
    /**
     * @hidden @internal
     */
    onSelectorClick(event) {
        // event.stopPropagation();
        event.preventDefault();
        // this.navService.handleFocusedAndActiveNode(this);
        if (event.shiftKey) {
            this.selectionService.selectMultipleNodes(this, event);
            return;
        }
        if (this.selected) {
            this.selectionService.deselectNode(this, event);
        }
        else {
            this.selectionService.selectNode(this, event);
        }
    }
    /**
     * Toggles the node expansion state, triggering animation
     *
     * ```html
     * <igx-tree>
     *      <igx-tree-node #node>My Node</igx-tree-node>
     * </igx-tree>
     * <button type="button" igxButton (click)="node.toggle()">Toggle Node</button>
     * ```
     *
     * ```typescript
     * const myNode: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];
     * myNode.toggle();
     * ```
     */
    toggle() {
        if (this.expanded) {
            this.collapse();
        }
        else {
            this.expand();
        }
    }
    /** @hidden @internal */
    indicatorClick() {
        this.toggle();
        this.navService.setFocusedAndActiveNode(this);
    }
    /**
     * @hidden @internal
     */
    onPointerDown(event) {
        event.stopPropagation();
        this.navService.setFocusedAndActiveNode(this);
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.selectionService.ensureStateOnNodeDelete(this);
    }
    /**
     * Expands the node, triggering animation
     *
     * ```html
     * <igx-tree>
     *      <igx-tree-node #node>My Node</igx-tree-node>
     * </igx-tree>
     * <button type="button" igxButton (click)="node.expand()">Expand Node</button>
     * ```
     *
     * ```typescript
     * const myNode: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];
     * myNode.expand();
     * ```
     */
    expand() {
        if (this.expanded && !this.treeService.collapsingNodes.has(this)) {
            return;
        }
        const args = {
            owner: this.tree,
            node: this,
            cancel: false
        };
        this.tree.nodeExpanding.emit(args);
        if (!args.cancel) {
            this.treeService.expand(this, true);
            this.cdr.detectChanges();
            this.playOpenAnimation(this.childrenContainer);
        }
    }
    /**
     * Collapses the node, triggering animation
     *
     * ```html
     * <igx-tree>
     *      <igx-tree-node #node>My Node</igx-tree-node>
     * </igx-tree>
     * <button type="button" igxButton (click)="node.collapse()">Collapse Node</button>
     * ```
     *
     * ```typescript
     * const myNode: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];
     * myNode.collapse();
     * ```
     */
    collapse() {
        if (!this.expanded || this.treeService.collapsingNodes.has(this)) {
            return;
        }
        const args = {
            owner: this.tree,
            node: this,
            cancel: false
        };
        this.tree.nodeCollapsing.emit(args);
        if (!args.cancel) {
            this.treeService.collapsing(this);
            this.playCloseAnimation(this.childrenContainer);
        }
    }
    /** @hidden @internal */
    addLinkChild(link) {
        this._tabIndex = -1;
        this.registeredChildren.push(link);
    }
    /** @hidden @internal */
    removeLinkChild(link) {
        const index = this.registeredChildren.indexOf(link);
        if (index !== -1) {
            this.registeredChildren.splice(index, 1);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxTreeNodeComponent, deps: [{ token: IGX_TREE_COMPONENT }, { token: i2.IgxTreeSelectionService }, { token: i3.IgxTreeService }, { token: i1.IgxTreeNavigationService }, { token: i0.ChangeDetectorRef }, { token: IgxAngularAnimationService }, { token: i0.ElementRef }, { token: IGX_TREE_NODE_COMPONENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.8", type: IgxTreeNodeComponent, isStandalone: true, selector: "igx-tree-node", inputs: { data: "data", loading: "loading", resourceStrings: "resourceStrings", active: "active", disabled: "disabled", selected: "selected", expanded: "expanded" }, outputs: { selectedChange: "selectedChange", expandedChange: "expandedChange" }, host: { properties: { "class.igx-tree-node--disabled": "this.disabled", "class.igx-tree-node": "this.cssClass", "style.--component-size": "this.size", "attr.role": "this.role" } }, providers: [
            { provide: IGX_TREE_NODE_COMPONENT, useExisting: IgxTreeNodeComponent }
        ], queries: [{ propertyName: "linkChildren", predicate: IgxTreeNodeLinkDirective, read: ElementRef }, { propertyName: "_children", predicate: IGX_TREE_NODE_COMPONENT, read: IGX_TREE_NODE_COMPONENT }, { propertyName: "allChildren", predicate: IGX_TREE_NODE_COMPONENT, descendants: true, read: IGX_TREE_NODE_COMPONENT }], viewQueries: [{ propertyName: "header", first: true, predicate: ["ghostTemplate"], descendants: true, read: ElementRef }, { propertyName: "_defaultExpandIndicatorTemplate", first: true, predicate: ["defaultIndicator"], descendants: true, read: TemplateRef, static: true }, { propertyName: "childrenContainer", first: true, predicate: ["childrenContainer"], descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: "<ng-template #noDragTemplate>\n    <ng-template *ngTemplateOutlet=\"headerTemplate\"></ng-template>\n</ng-template>\n\n<!-- Will switch templates depending on dragDrop -->\n<ng-template *ngTemplateOutlet=\"noDragTemplate\">\n</ng-template>\n\n<div #childrenContainer\n    *ngIf=\"expanded && !loading\"\n    class=\"igx-tree-node__group\"\n    role=\"group\"\n>\n    <ng-content select=\"igx-tree-node\"></ng-content>\n</div>\n\n\n<ng-template #defaultIndicator>\n    <igx-icon [attr.aria-label]=\"expanded ? resourceStrings.igx_collapse : resourceStrings.igx_expand\">\n        {{ expanded ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\" }}\n    </igx-icon>\n</ng-template>\n\n<!-- separated in a template in case this ever needs to be templatable -->\n<ng-template #selectMarkerTemplate>\n    <igx-checkbox [checked]=\"selected\" [readonly]=\"true\" [indeterminate]=\"indeterminate\" [tabindex]=\"-1\">\n    </igx-checkbox>\n</ng-template>\n\n<ng-template #headerTemplate>\n    <div #ghostTemplate class=\"igx-tree-node__wrapper\"\n        [attr.role]=\"role\"\n        [tabIndex]=\"tabIndex\"\n        [ngClass]=\"{\n            'igx-tree-node__wrapper--selected': selected,\n            'igx-tree-node__wrapper--active' : this.active,\n            'igx-tree-node__wrapper--focused' : this.focused,\n            'igx-tree-node__wrapper--disabled' : this.disabled\n        }\"\n        (pointerdown)=\"onPointerDown($event)\"\n        (focus)=\"handleFocus()\"\n        (blur)=\"clearFocus()\"\n    >\n        <div aria-hidden=\"true\">\n            <span *ngFor=\"let item of [].constructor(level)\"\n                aria-hidden=\"true\"\n                class=\"igx-tree-node__spacer\"\n            ></span>\n        </div>\n\n        <!-- Expand/Collapse indicator -->\n        <span *ngIf=\"!loading\"\n            class=\"igx-tree-node__toggle-button\"\n            [ngClass]=\"{ 'igx-tree-node__toggle-button--hidden': !_children?.length }\"\n            (click)=\"indicatorClick()\"\n        >\n            <ng-container *ngTemplateOutlet=\"expandIndicatorTemplate, context: { $implicit: expanded }\">\n            </ng-container>\n        </span>\n        <span *ngIf=\"loading\"\n            class=\"igx-tree-node__toggle-button\"\n        >\n        \t<igx-circular-bar\n            \t[animate]=\"false\"\n            \t[indeterminate]=\"true\"\n            \t[textVisibility]=\"false\"\n        \t>\n        \t</igx-circular-bar>\n        </span>\n\n        <!-- Item selection -->\n        <div *ngIf=\"showSelectors\"\n            class=\"igx-tree-node__select\"\n            (pointerdown)=\"$event.preventDefault()\"\n            (click)=\"onSelectorClick($event)\">\n            <ng-container *ngTemplateOutlet=\"selectMarkerTemplate\">\n            </ng-container>\n        </div>\n\n        <div class=\"igx-tree-node__content\">\n            <!-- Ghost content -->\n            <ng-content></ng-content>\n        </div>\n    </div>\n\n    <!--  Buffer element for 'move after' when D&D is implemented-->\n    <div class=\"igx-tree-node__drop-indicator\">\n        <span aria-hidden=\"true\" class=\"igx-tree-node__spacer\" *ngFor=\"let item of [].constructor(level)\"></span>\n        <!-- style rules target this div, do not delete it -->\n        <div></div>\n    </div>\n</ng-template>\n\n<ng-template #dragTemplate>\n    <!-- Drag drop goes here\n        igxDrop\n        #dropRef=\"drop\"\n        [igxNodeDrag]=\"this\"\n        (dragStart)=\"logDrop(dropRef)\"\n        (leave)=\"emitLeave()\"\n        (enter)=\"emitEnter()\" -->\n    <div class=\"igx-tree-node__drag-wrapper\">\n        <ng-template *ngTemplateOutlet=\"headerTemplate\"></ng-template>\n    </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "component", type: IgxCheckboxComponent, selector: "igx-checkbox", inputs: ["id", "labelId", "value", "name", "tabindex", "labelPosition", "disableRipple", "required", "aria-labelledby", "aria-label", "indeterminate", "checked", "disabled", "invalid", "readonly", "disableTransitions"], outputs: ["change"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxCircularProgressBarComponent, selector: "igx-circular-bar", inputs: ["id", "isIndeterminate", "textVisibility", "text"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: IgxTreeNodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-tree-node', providers: [
                        { provide: IGX_TREE_NODE_COMPONENT, useExisting: IgxTreeNodeComponent }
                    ], standalone: true, imports: [NgTemplateOutlet, NgIf, IgxIconComponent, IgxCheckboxComponent, NgClass, NgFor, IgxCircularProgressBarComponent], template: "<ng-template #noDragTemplate>\n    <ng-template *ngTemplateOutlet=\"headerTemplate\"></ng-template>\n</ng-template>\n\n<!-- Will switch templates depending on dragDrop -->\n<ng-template *ngTemplateOutlet=\"noDragTemplate\">\n</ng-template>\n\n<div #childrenContainer\n    *ngIf=\"expanded && !loading\"\n    class=\"igx-tree-node__group\"\n    role=\"group\"\n>\n    <ng-content select=\"igx-tree-node\"></ng-content>\n</div>\n\n\n<ng-template #defaultIndicator>\n    <igx-icon [attr.aria-label]=\"expanded ? resourceStrings.igx_collapse : resourceStrings.igx_expand\">\n        {{ expanded ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\" }}\n    </igx-icon>\n</ng-template>\n\n<!-- separated in a template in case this ever needs to be templatable -->\n<ng-template #selectMarkerTemplate>\n    <igx-checkbox [checked]=\"selected\" [readonly]=\"true\" [indeterminate]=\"indeterminate\" [tabindex]=\"-1\">\n    </igx-checkbox>\n</ng-template>\n\n<ng-template #headerTemplate>\n    <div #ghostTemplate class=\"igx-tree-node__wrapper\"\n        [attr.role]=\"role\"\n        [tabIndex]=\"tabIndex\"\n        [ngClass]=\"{\n            'igx-tree-node__wrapper--selected': selected,\n            'igx-tree-node__wrapper--active' : this.active,\n            'igx-tree-node__wrapper--focused' : this.focused,\n            'igx-tree-node__wrapper--disabled' : this.disabled\n        }\"\n        (pointerdown)=\"onPointerDown($event)\"\n        (focus)=\"handleFocus()\"\n        (blur)=\"clearFocus()\"\n    >\n        <div aria-hidden=\"true\">\n            <span *ngFor=\"let item of [].constructor(level)\"\n                aria-hidden=\"true\"\n                class=\"igx-tree-node__spacer\"\n            ></span>\n        </div>\n\n        <!-- Expand/Collapse indicator -->\n        <span *ngIf=\"!loading\"\n            class=\"igx-tree-node__toggle-button\"\n            [ngClass]=\"{ 'igx-tree-node__toggle-button--hidden': !_children?.length }\"\n            (click)=\"indicatorClick()\"\n        >\n            <ng-container *ngTemplateOutlet=\"expandIndicatorTemplate, context: { $implicit: expanded }\">\n            </ng-container>\n        </span>\n        <span *ngIf=\"loading\"\n            class=\"igx-tree-node__toggle-button\"\n        >\n        \t<igx-circular-bar\n            \t[animate]=\"false\"\n            \t[indeterminate]=\"true\"\n            \t[textVisibility]=\"false\"\n        \t>\n        \t</igx-circular-bar>\n        </span>\n\n        <!-- Item selection -->\n        <div *ngIf=\"showSelectors\"\n            class=\"igx-tree-node__select\"\n            (pointerdown)=\"$event.preventDefault()\"\n            (click)=\"onSelectorClick($event)\">\n            <ng-container *ngTemplateOutlet=\"selectMarkerTemplate\">\n            </ng-container>\n        </div>\n\n        <div class=\"igx-tree-node__content\">\n            <!-- Ghost content -->\n            <ng-content></ng-content>\n        </div>\n    </div>\n\n    <!--  Buffer element for 'move after' when D&D is implemented-->\n    <div class=\"igx-tree-node__drop-indicator\">\n        <span aria-hidden=\"true\" class=\"igx-tree-node__spacer\" *ngFor=\"let item of [].constructor(level)\"></span>\n        <!-- style rules target this div, do not delete it -->\n        <div></div>\n    </div>\n</ng-template>\n\n<ng-template #dragTemplate>\n    <!-- Drag drop goes here\n        igxDrop\n        #dropRef=\"drop\"\n        [igxNodeDrag]=\"this\"\n        (dragStart)=\"logDrop(dropRef)\"\n        (leave)=\"emitLeave()\"\n        (enter)=\"emitEnter()\" -->\n    <div class=\"igx-tree-node__drag-wrapper\">\n        <ng-template *ngTemplateOutlet=\"headerTemplate\"></ng-template>\n    </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_TREE_COMPONENT]
                }] }, { type: i2.IgxTreeSelectionService }, { type: i3.IgxTreeService }, { type: i1.IgxTreeNavigationService }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IgxAngularAnimationService]
                }] }, { type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [IGX_TREE_NODE_COMPONENT]
                }] }]; }, propDecorators: { data: [{
                type: Input
            }], loading: [{
                type: Input
            }], resourceStrings: [{
                type: Input
            }], active: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], expandedChange: [{
                type: Output
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-tree-node--disabled']
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-tree-node']
            }], size: [{
                type: HostBinding,
                args: ['style.--component-size']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], linkChildren: [{
                type: ContentChildren,
                args: [IgxTreeNodeLinkDirective, { read: ElementRef }]
            }], _children: [{
                type: ContentChildren,
                args: [IGX_TREE_NODE_COMPONENT, { read: IGX_TREE_NODE_COMPONENT }]
            }], allChildren: [{
                type: ContentChildren,
                args: [IGX_TREE_NODE_COMPONENT, { read: IGX_TREE_NODE_COMPONENT, descendants: true }]
            }], header: [{
                type: ViewChild,
                args: ['ghostTemplate', { read: ElementRef }]
            }], _defaultExpandIndicatorTemplate: [{
                type: ViewChild,
                args: ['defaultIndicator', { read: TemplateRef, static: true }]
            }], childrenContainer: [{
                type: ViewChild,
                args: ['childrenContainer', { read: ElementRef }]
            }], selected: [{
                type: Input
            }], expanded: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,