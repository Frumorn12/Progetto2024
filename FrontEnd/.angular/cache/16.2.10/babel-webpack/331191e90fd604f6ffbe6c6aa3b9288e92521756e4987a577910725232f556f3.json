{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl } from \"@angular/forms\";\nexport let RegistrazioneComponent = class RegistrazioneComponent {\n  constructor(router, user) {\n    this.router = router;\n    this.user = user;\n    this.nome = new FormControl();\n    this.cognome = new FormControl();\n    this.username = new FormControl();\n    this.email = new FormControl();\n    this.data = new FormControl();\n    this.via = new FormControl();\n    this.civico = new FormControl();\n    this.password1 = new FormControl();\n    this.password = '';\n    this.strength = 0;\n    // Nel tuo componente TypeScript\n    this.formIsValid = false;\n    this.passwordLengthValid = false;\n  }\n  onPasswordChange() {\n    this.strength = calculateStrength(this.password);\n    this.passwordLengthValid = this.password.length >= 8;\n    console.log(this.formIsValid);\n  }\n  getStrengthColor() {\n    // Restituisci uno stile CSS in base alla forza della password, ad esempio, un gradiente di colore\n    const color = this.strength < 50 ? 'red' : 'green';\n    return {\n      'background': `linear-gradient(to right, ${color} ${this.strength}%, #eee ${this.strength}%)`\n    };\n  }\n  go() {\n    console.log(\"TEST VEDO SE VA GO\");\n    this.router.navigate(['/']);\n  }\n  updateFormValidity() {\n    // Controlla se tutti i campi richiesti sono stati toccati\n    if (this.nome.value == null || this.cognome.value == null || this.username.value == null || this.email.value == null || this.data.value == null || this.via.value == null || this.civico.value == null) {\n      this.formIsValid = false;\n    } else if (this.nome.value == \"\" || this.cognome.value == \"\" || this.username.value == \"\" || this.email.value == \"\" || this.data.value == \"\" || this.via.value == \"\" || this.civico.value == \"\") {\n      this.formIsValid = false;\n    } else {\n      this.formIsValid = true;\n    }\n    console.log(this.formIsValid);\n  }\n  change() {\n    this.updateFormValidity();\n  }\n};\n__decorate([ViewChild('myForm', {\n  static: false\n})], RegistrazioneComponent.prototype, \"registrationForm\", void 0);\n__decorate([ViewChild('indirizzo')], RegistrazioneComponent.prototype, \"addressInput\", void 0);\nRegistrazioneComponent = __decorate([Component({\n  selector: 'app-registrazione',\n  templateUrl: './registrazione.component.html',\n  styleUrls: ['./registrazione.component.css']\n})], RegistrazioneComponent);","map":{"version":3,"names":["Component","ViewChild","FormControl","RegistrazioneComponent","constructor","router","user","nome","cognome","username","email","data","via","civico","password1","password","strength","formIsValid","passwordLengthValid","onPasswordChange","calculateStrength","length","console","log","getStrengthColor","color","go","navigate","updateFormValidity","value","change","__decorate","static","selector","templateUrl","styleUrls"],"sources":["D:\\codici\\ProgettoWebFrontEnd\\src\\app\\registrazione\\registrazione.component.ts"],"sourcesContent":["import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {FormControl, NgForm} from \"@angular/forms\";\nimport {Router} from \"@angular/router\";\ndeclare const calculateStrength: (password: string) => number; // Importa la funzione dalla logica JavaScript\n\n\ndeclare const google: any;\n\n\n@Component({\n  selector: 'app-registrazione',\n  templateUrl: './registrazione.component.html',\n  styleUrls: ['./registrazione.component.css']\n})\n\n\nexport class RegistrazioneComponent{\n\n\n\n  @ViewChild('myForm', { static: false }) registrationForm!: NgForm; // Aggiunta l'inizializzazione\n\n\n  @ViewChild('indirizzo') addressInput: ElementRef | undefined;\n\n  nome = new FormControl();\n  cognome = new FormControl();\n  username = new FormControl();\n\n  email = new FormControl();\n  data = new FormControl();\n  via = new FormControl();\n  civico = new FormControl();\n  password1 = new FormControl();\n\n  password: string = '';\n  strength: number = 0;\n\n  // Nel tuo componente TypeScript\n  formIsValid = false;\n\n\n\n  passwordLengthValid = false;\n\n  constructor(private router: Router, private user: ) {}\n\n\n\n\n\n  onPasswordChange() {\n    this.strength = calculateStrength(this.password);\n    this.passwordLengthValid = this.password.length >= 8;\n    console.log(this.formIsValid)\n  }\n\n  getStrengthColor() {\n    // Restituisci uno stile CSS in base alla forza della password, ad esempio, un gradiente di colore\n    const color = this.strength < 50 ? 'red' : 'green';\n    return { 'background': `linear-gradient(to right, ${color} ${this.strength}%, #eee ${this.strength}%)` };\n  }\n\n  go(){\n    console.log(\"TEST VEDO SE VA GO\");\n\n    this.router.navigate(['/']);\n\n  }\n\n  updateFormValidity() {\n    // Controlla se tutti i campi richiesti sono stati toccati\n    if(this.nome.value == null || this.cognome.value == null || this.username.value == null || this.email.value == null || this.data.value == null || this.via.value == null || this.civico.value == null ){\n      this.formIsValid = false;\n    }\n\n    else if (this.nome.value == \"\" || this.cognome.value == \"\" || this.username.value == \"\" || this.email.value == \"\" || this.data.value == \"\" || this.via.value == \"\" || this.civico.value == \"\" ){\n      this.formIsValid = false;\n    }\n\n    else {\n      this.formIsValid = true;\n    }\n    console.log(this.formIsValid);\n  }\n\n\n\n  change() {\n    this.updateFormValidity();\n\n  }\n\n\n\n\n\n\n\n\n\n\n}\n"],"mappings":";AAAA,SAAQA,SAAS,EAAsBC,SAAS,QAAO,eAAe;AACtE,SAAQC,WAAW,QAAe,gBAAgB;AAe3C,WAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EA6BjCC,YAAoBC,MAAc,EAAUC,IAAK;IAA7B,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,IAAI,GAAJA,IAAI;IApBhD,KAAAC,IAAI,GAAG,IAAIL,WAAW,EAAE;IACxB,KAAAM,OAAO,GAAG,IAAIN,WAAW,EAAE;IAC3B,KAAAO,QAAQ,GAAG,IAAIP,WAAW,EAAE;IAE5B,KAAAQ,KAAK,GAAG,IAAIR,WAAW,EAAE;IACzB,KAAAS,IAAI,GAAG,IAAIT,WAAW,EAAE;IACxB,KAAAU,GAAG,GAAG,IAAIV,WAAW,EAAE;IACvB,KAAAW,MAAM,GAAG,IAAIX,WAAW,EAAE;IAC1B,KAAAY,SAAS,GAAG,IAAIZ,WAAW,EAAE;IAE7B,KAAAa,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,CAAC;IAEpB;IACA,KAAAC,WAAW,GAAG,KAAK;IAInB,KAAAC,mBAAmB,GAAG,KAAK;EAE0B;EAMrDC,gBAAgBA,CAAA;IACd,IAAI,CAACH,QAAQ,GAAGI,iBAAiB,CAAC,IAAI,CAACL,QAAQ,CAAC;IAChD,IAAI,CAACG,mBAAmB,GAAG,IAAI,CAACH,QAAQ,CAACM,MAAM,IAAI,CAAC;IACpDC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,WAAW,CAAC;EAC/B;EAEAO,gBAAgBA,CAAA;IACd;IACA,MAAMC,KAAK,GAAG,IAAI,CAACT,QAAQ,GAAG,EAAE,GAAG,KAAK,GAAG,OAAO;IAClD,OAAO;MAAE,YAAY,EAAE,6BAA6BS,KAAK,IAAI,IAAI,CAACT,QAAQ,WAAW,IAAI,CAACA,QAAQ;IAAI,CAAE;EAC1G;EAEAU,EAAEA,CAAA;IACAJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IAEjC,IAAI,CAAClB,MAAM,CAACsB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAE7B;EAEAC,kBAAkBA,CAAA;IAChB;IACA,IAAG,IAAI,CAACrB,IAAI,CAACsB,KAAK,IAAI,IAAI,IAAI,IAAI,CAACrB,OAAO,CAACqB,KAAK,IAAI,IAAI,IAAI,IAAI,CAACpB,QAAQ,CAACoB,KAAK,IAAI,IAAI,IAAI,IAAI,CAACnB,KAAK,CAACmB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAClB,IAAI,CAACkB,KAAK,IAAI,IAAI,IAAI,IAAI,CAACjB,GAAG,CAACiB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAChB,MAAM,CAACgB,KAAK,IAAI,IAAI,EAAE;MACrM,IAAI,CAACZ,WAAW,GAAG,KAAK;KACzB,MAEI,IAAI,IAAI,CAACV,IAAI,CAACsB,KAAK,IAAI,EAAE,IAAI,IAAI,CAACrB,OAAO,CAACqB,KAAK,IAAI,EAAE,IAAI,IAAI,CAACpB,QAAQ,CAACoB,KAAK,IAAI,EAAE,IAAI,IAAI,CAACnB,KAAK,CAACmB,KAAK,IAAI,EAAE,IAAI,IAAI,CAAClB,IAAI,CAACkB,KAAK,IAAI,EAAE,IAAI,IAAI,CAACjB,GAAG,CAACiB,KAAK,IAAI,EAAE,IAAI,IAAI,CAAChB,MAAM,CAACgB,KAAK,IAAI,EAAE,EAAE;MAC7L,IAAI,CAACZ,WAAW,GAAG,KAAK;KACzB,MAEI;MACH,IAAI,CAACA,WAAW,GAAG,IAAI;;IAEzBK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,WAAW,CAAC;EAC/B;EAIAa,MAAMA,CAAA;IACJ,IAAI,CAACF,kBAAkB,EAAE;EAE3B;CAWD;AAlFyCG,UAAA,EAAvC9B,SAAS,CAAC,QAAQ,EAAE;EAAE+B,MAAM,EAAE;AAAK,CAAE,CAAC,C,+DAA2B;AAG1CD,UAAA,EAAvB9B,SAAS,CAAC,WAAW,CAAC,C,2DAAsC;AAPlDE,sBAAsB,GAAA4B,UAAA,EAPlC/B,SAAS,CAAC;EACTiC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EAGWhC,sBAAsB,CAsFlC"},"metadata":{},"sourceType":"module","externalDependencies":[]}