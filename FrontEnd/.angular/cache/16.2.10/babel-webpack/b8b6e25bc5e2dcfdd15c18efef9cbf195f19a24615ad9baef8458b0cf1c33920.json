{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth-service.service\";\nimport * as i3 from \"@angular/router\";\nexport class UtenteServiceService {\n  constructor(http, auth, router) {\n    this.http = http;\n    this.auth = auth;\n    this.router = router;\n    this.backendUrl = \"http://localhost:8080\";\n    this.isUser = false;\n    this.type = 0;\n  }\n  // @ts-ignore\n  checkUtente(username) {\n    const url = `${this.backendUrl}/checkUtente/${username}`;\n    return this.http.get(url);\n  }\n  getTipo(username) {\n    const url = `${this.backendUrl}/getTipo/${username}`;\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n    return this.http.get(url, {\n      headers\n    });\n  }\n  registraUtente(username, password, tipo, nome, cognome, data, via, civico, email) {\n    // Creazione dell'header con il token di autorizzazione\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n    // Invio della richiesta POST al backend\n    return this.http.post(this.backendUrl + \"/registrazione/\" + username + \"/\" + password + \"/\" + tipo + \"/\" + nome + \"/\" + cognome + \"/\" + data + \"/\" + via + \"/\" + civico + \"/\" + email, headers);\n  }\n  getAllUtente() {\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n    return this.http.get(this.backendUrl + \"/getAllUtente\", {\n      headers\n    });\n  }\n  changeTipo(username, number) {\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n    return this.http.post(this.backendUrl + \"/changeTipo/\" + username + \"/\" + number, headers);\n  }\n  static #_ = this.ɵfac = function UtenteServiceService_Factory(t) {\n    return new (t || UtenteServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthServiceService), i0.ɵɵinject(i3.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtenteServiceService,\n    factory: UtenteServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","UtenteServiceService","constructor","http","auth","router","backendUrl","isUser","type","checkUtente","username","url","get","getTipo","headers","set","token","registraUtente","password","tipo","nome","cognome","data","via","civico","email","post","getAllUtente","changeTipo","number","_","i0","ɵɵinject","i1","HttpClient","i2","AuthServiceService","i3","Router","_2","factory","ɵfac","providedIn"],"sources":["D:\\codici\\ProgettoWebFrontEnd\\src\\app\\services\\utente-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {AuthServiceService} from \"./auth-service.service\";\nimport {Observable} from \"rxjs\";\nimport {Router} from \"@angular/router\";\n\nimport {Registrazione, UtenteCompleto} from '../model/utente';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtenteServiceService {\n  private backendUrl = \"http://localhost:8080\"\n\n  isUser:boolean = false\n  type:number = 0\n\n\n  constructor(private http:HttpClient,private auth:AuthServiceService, private router: Router) {  }\n\n  // @ts-ignore\n  checkUtente(username: string): Observable<boolean> {\n    const url = `${this.backendUrl}/checkUtente/${username}`;\n\n    return this.http.get<boolean>(url);\n  }\n\n  getTipo(username: string): Observable<number> {\n    const url = `${this.backendUrl}/getTipo/${username}`;\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n\n    return this.http.get<number>(url, { headers });\n  }\n\n  registraUtente(username: string, password: string, tipo: number, nome: string, cognome: string, data: string, via: string, civico: number, email: string) {\n\n\n    // Creazione dell'header con il token di autorizzazione\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n\n    // Invio della richiesta POST al backend\n    return this.http.post(this.backendUrl + \"/registrazione/\"+username+\"/\"+password+\"/\"+tipo+\"/\"+nome+\"/\"+cognome+\"/\"+data+\"/\"+via+\"/\"+civico+\"/\"+email , headers );\n  }\n\n  getAllUtente() {\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n    return this.http.get<UtenteCompleto[]>(this.backendUrl + \"/getAllUtente\", { headers });\n\n\n  }\n\n  changeTipo(username: string, number: number) {\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n    return this.http.post(this.backendUrl + \"/changeTipo/\"+username+\"/\"+number, headers );\n\n\n  }\n}\n"],"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;;;AAU5D,OAAM,MAAOC,oBAAoB;EAO/BC,YAAoBC,IAAe,EAASC,IAAuB,EAAUC,MAAc;IAAvE,KAAAF,IAAI,GAAJA,IAAI;IAAoB,KAAAC,IAAI,GAAJA,IAAI;IAA6B,KAAAC,MAAM,GAANA,MAAM;IAN3E,KAAAC,UAAU,GAAG,uBAAuB;IAE5C,KAAAC,MAAM,GAAW,KAAK;IACtB,KAAAC,IAAI,GAAU,CAAC;EAGiF;EAEhG;EACAC,WAAWA,CAACC,QAAgB;IAC1B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,UAAU,gBAAgBI,QAAQ,EAAE;IAExD,OAAO,IAAI,CAACP,IAAI,CAACS,GAAG,CAAUD,GAAG,CAAC;EACpC;EAEAE,OAAOA,CAACH,QAAgB;IACtB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,UAAU,YAAYI,QAAQ,EAAE;IACpD,MAAMI,OAAO,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAACX,IAAI,CAACY,KAAK,CAAC;IAElF,OAAO,IAAI,CAACb,IAAI,CAACS,GAAG,CAASD,GAAG,EAAE;MAAEG;IAAO,CAAE,CAAC;EAChD;EAEAG,cAAcA,CAACP,QAAgB,EAAEQ,QAAgB,EAAEC,IAAY,EAAEC,IAAY,EAAEC,OAAe,EAAEC,IAAY,EAAEC,GAAW,EAAEC,MAAc,EAAEC,KAAa;IAGtJ;IACA,MAAMX,OAAO,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAACX,IAAI,CAACY,KAAK,CAAC;IAElF;IACA,OAAO,IAAI,CAACb,IAAI,CAACuB,IAAI,CAAC,IAAI,CAACpB,UAAU,GAAG,iBAAiB,GAACI,QAAQ,GAAC,GAAG,GAACQ,QAAQ,GAAC,GAAG,GAACC,IAAI,GAAC,GAAG,GAACC,IAAI,GAAC,GAAG,GAACC,OAAO,GAAC,GAAG,GAACC,IAAI,GAAC,GAAG,GAACC,GAAG,GAAC,GAAG,GAACC,MAAM,GAAC,GAAG,GAACC,KAAK,EAAGX,OAAO,CAAE;EACjK;EAEAa,YAAYA,CAAA;IACV,MAAMb,OAAO,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAACX,IAAI,CAACY,KAAK,CAAC;IAClF,OAAO,IAAI,CAACb,IAAI,CAACS,GAAG,CAAmB,IAAI,CAACN,UAAU,GAAG,eAAe,EAAE;MAAEQ;IAAO,CAAE,CAAC;EAGxF;EAEAc,UAAUA,CAAClB,QAAgB,EAAEmB,MAAc;IACzC,MAAMf,OAAO,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAACX,IAAI,CAACY,KAAK,CAAC;IAClF,OAAO,IAAI,CAACb,IAAI,CAACuB,IAAI,CAAC,IAAI,CAACpB,UAAU,GAAG,cAAc,GAACI,QAAQ,GAAC,GAAG,GAACmB,MAAM,EAAEf,OAAO,CAAE;EAGvF;EAAC,QAAAgB,CAAA,G;qBA7CU7B,oBAAoB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,kBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAApBtC,oBAAoB;IAAAuC,OAAA,EAApBvC,oBAAoB,CAAAwC,IAAA;IAAAC,UAAA,EAFnB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}