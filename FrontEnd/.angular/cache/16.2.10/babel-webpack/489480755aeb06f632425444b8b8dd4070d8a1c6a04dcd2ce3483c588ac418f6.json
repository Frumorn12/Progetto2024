{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth-service.service\";\nimport * as i3 from \"@angular/router\";\nexport class UtenteServiceService {\n  constructor(http, auth, router) {\n    this.http = http;\n    this.auth = auth;\n    this.router = router;\n    this.backendUrl = \"http://localhost:8080\";\n    this.isUser = false;\n    this.type = 0;\n  }\n  // @ts-ignore\n  checkUtente(username) {\n    const url = `${this.backendUrl}/checkUtente/${username}`;\n    return this.http.get(url);\n  }\n  getTipo(username) {\n    const url = `${this.backendUrl}/getTipo/${username}`;\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n    return this.http.get(url, {\n      headers\n    });\n  }\n  registraUtente(username, password, tipo, nome, cognome, data, via, civico, email) {\n    utente: Registrazione = {\n      username: username,\n      password: password,\n      tipo: tipo,\n      nome: nome,\n      cognome: cognome,\n      data: data,\n      via: via,\n      civico: civico,\n      email: email\n    };\n    var header = {\n      headers: new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token)\n    };\n    return this.http.post(this.backendUrl + \"/registrazione/\", +username + password + tipo + nome + cognome + data + via + civico + email, header);\n  }\n  static #_ = this.ɵfac = function UtenteServiceService_Factory(t) {\n    return new (t || UtenteServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthServiceService), i0.ɵɵinject(i3.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtenteServiceService,\n    factory: UtenteServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","UtenteServiceService","constructor","http","auth","router","backendUrl","isUser","type","checkUtente","username","url","get","getTipo","headers","set","token","registraUtente","password","tipo","nome","cognome","data","via","civico","email","utente","Registrazione","header","post","_","i0","ɵɵinject","i1","HttpClient","i2","AuthServiceService","i3","Router","_2","factory","ɵfac","providedIn"],"sources":["D:\\codici\\ProgettoWebFrontEnd\\src\\app\\services\\utente-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {AuthServiceService} from \"./auth-service.service\";\nimport {Observable} from \"rxjs\";\nimport {Router} from \"@angular/router\";\n\nimport { Registrazione } from '../model/utente';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtenteServiceService {\n  private backendUrl = \"http://localhost:8080\"\n\n  isUser:boolean = false\n  type:number = 0\n\n\n  constructor(private http:HttpClient,private auth:AuthServiceService, private router: Router) {  }\n\n  // @ts-ignore\n  checkUtente(username: string): Observable<boolean> {\n    const url = `${this.backendUrl}/checkUtente/${username}`;\n\n    return this.http.get<boolean>(url);\n  }\n\n  getTipo(username: string): Observable<number> {\n    const url = `${this.backendUrl}/getTipo/${username}`;\n    const headers = new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token);\n\n    return this.http.get<number>(url, { headers });\n  }\n\n  registraUtente(username:string,password:string,tipo:number,nome:string, cognome:string, data:string, via:string, civico:number, email:string)\n  {\n\n\n    utente : Registrazione ={\n      username: username,\n      password: password,\n      tipo: tipo,\n      nome: nome,\n      cognome: cognome,\n      data: data,\n      via: via,\n      civico: civico,\n      email: email\n    };\n    var header = {\n      headers: new HttpHeaders().set('Authorization', 'Basic ' + this.auth.token)\n    }\n    return this.http.post(this.backendUrl + \"/registrazione/\", + username + password + tipo + nome + cognome + data + via + civico + email, header)\n  }\n}\n"],"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;;;AAU5D,OAAM,MAAOC,oBAAoB;EAO/BC,YAAoBC,IAAe,EAASC,IAAuB,EAAUC,MAAc;IAAvE,KAAAF,IAAI,GAAJA,IAAI;IAAoB,KAAAC,IAAI,GAAJA,IAAI;IAA6B,KAAAC,MAAM,GAANA,MAAM;IAN3E,KAAAC,UAAU,GAAG,uBAAuB;IAE5C,KAAAC,MAAM,GAAW,KAAK;IACtB,KAAAC,IAAI,GAAU,CAAC;EAGiF;EAEhG;EACAC,WAAWA,CAACC,QAAgB;IAC1B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,UAAU,gBAAgBI,QAAQ,EAAE;IAExD,OAAO,IAAI,CAACP,IAAI,CAACS,GAAG,CAAUD,GAAG,CAAC;EACpC;EAEAE,OAAOA,CAACH,QAAgB;IACtB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,UAAU,YAAYI,QAAQ,EAAE;IACpD,MAAMI,OAAO,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAACX,IAAI,CAACY,KAAK,CAAC;IAElF,OAAO,IAAI,CAACb,IAAI,CAACS,GAAG,CAASD,GAAG,EAAE;MAAEG;IAAO,CAAE,CAAC;EAChD;EAEAG,cAAcA,CAACP,QAAe,EAACQ,QAAe,EAACC,IAAW,EAACC,IAAW,EAAEC,OAAc,EAAEC,IAAW,EAAEC,GAAU,EAAEC,MAAa,EAAEC,KAAY;IAI1IC,MAAM,EAAGC,aAAa,GAAE;MACtBjB,QAAQ,EAAEA,QAAQ;MAClBQ,QAAQ,EAAEA,QAAQ;MAClBC,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA,IAAI;MACVC,OAAO,EAAEA,OAAO;MAChBC,IAAI,EAAEA,IAAI;MACVC,GAAG,EAAEA,GAAG;MACRC,MAAM,EAAEA,MAAM;MACdC,KAAK,EAAEA;KACR;IACD,IAAIG,MAAM,GAAG;MACXd,OAAO,EAAE,IAAId,WAAW,EAAE,CAACe,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAACX,IAAI,CAACY,KAAK;KAC3E;IACD,OAAO,IAAI,CAACb,IAAI,CAAC0B,IAAI,CAAC,IAAI,CAACvB,UAAU,GAAG,iBAAiB,EAAE,CAAEI,QAAQ,GAAGQ,QAAQ,GAAGC,IAAI,GAAGC,IAAI,GAAGC,OAAO,GAAGC,IAAI,GAAGC,GAAG,GAAGC,MAAM,GAAGC,KAAK,EAAEG,MAAM,CAAC;EACjJ;EAAC,QAAAE,CAAA,G;qBA1CU7B,oBAAoB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,kBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAApBtC,oBAAoB;IAAAuC,OAAA,EAApBvC,oBAAoB,CAAAwC,IAAA;IAAAC,UAAA,EAFnB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}