{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let HeaderComponent = class HeaderComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.searchTerm = '';\n    this.autoCompleteList = ['Item1', 'Item2', 'Item3'];\n    this.showAutoComplete = false;\n  }\n  getRandomPhotoUrl() {\n    console.log(getRandomPhoto());\n    return getRandomPhoto();\n  }\n  isAuthenticated() {\n    return this.authService.isAuthenticated();\n  }\n  doLogout() {\n    console.log(\"click\");\n    this.authService.logout();\n  }\n  onInput() {\n    // Filtra la lista di autocompletamento solo se c'è un termine di ricerca\n    this.autoCompleteList = this.filterAutoCompleteList(this.searchTerm);\n    // Mostra la lista solo se c'è almeno un elemento nella lista di autocompletamento\n    this.showAutoComplete = this.autoCompleteList.length > 0;\n  }\n  filterAutoCompleteList(term) {\n    // Implementa la logica di filtraggio della lista in base al termine di ricerca\n    // Puoi utilizzare array methods come filter per questo scopo\n    // Ritorna la lista filtrata\n    return this.autoCompleteList.filter(item => item.toLowerCase().includes(term.toLowerCase()));\n  }\n  selectItem(item) {\n    this.searchTerm = item;\n    this.showAutoComplete = false;\n  }\n  onBlur() {\n    // Nascondi la lista quando si perde il focus, ma solo se l'utente non ha selezionato un elemento\n    if (!this.showAutoComplete) {\n      this.showAutoComplete = false;\n    }\n  }\n};\nHeaderComponent = __decorate([Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})], HeaderComponent);","map":{"version":3,"names":["Component","HeaderComponent","constructor","authService","searchTerm","autoCompleteList","showAutoComplete","getRandomPhotoUrl","console","log","getRandomPhoto","isAuthenticated","doLogout","logout","onInput","filterAutoCompleteList","length","term","filter","item","toLowerCase","includes","selectItem","onBlur","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\codici\\ProgettoWebFrontEnd\\src\\app\\header\\header.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { AuthServiceService } from '../services/auth-service.service';\r\n\r\ndeclare function getRandomPhoto(): string;\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\n\r\n\r\nexport class HeaderComponent {\r\n\r\n  constructor(private authService: AuthServiceService){}\r\n\r\n  getRandomPhotoUrl(){\r\n    console.log(getRandomPhoto());\r\n    return getRandomPhoto();\r\n  }\r\n\r\n  isAuthenticated(){\r\n    return this.authService.isAuthenticated();\r\n  }\r\n  doLogout(){\r\n    console.log(\"click\");\r\n    this.authService.logout();\r\n  }\r\n\r\n  searchTerm: string = '';\r\n  autoCompleteList: string[] = ['Item1', 'Item2', 'Item3'];\r\n  showAutoComplete: boolean = false;\r\n\r\n  onInput() {\r\n    // Filtra la lista di autocompletamento solo se c'è un termine di ricerca\r\n    this.autoCompleteList = this.filterAutoCompleteList(this.searchTerm);\r\n\r\n    // Mostra la lista solo se c'è almeno un elemento nella lista di autocompletamento\r\n    this.showAutoComplete = this.autoCompleteList.length > 0;\r\n  }\r\n\r\n  filterAutoCompleteList(term: string): string[] {\r\n    // Implementa la logica di filtraggio della lista in base al termine di ricerca\r\n    // Puoi utilizzare array methods come filter per questo scopo\r\n    // Ritorna la lista filtrata\r\n    return this.autoCompleteList.filter(item => item.toLowerCase().includes(term.toLowerCase()));\r\n  }\r\n\r\n  selectItem(item: string) {\r\n    this.searchTerm = item;\r\n    this.showAutoComplete = false;\r\n  }\r\n\r\n  onBlur() {\r\n    // Nascondi la lista quando si perde il focus, ma solo se l'utente non ha selezionato un elemento\r\n    if (!this.showAutoComplete) {\r\n      this.showAutoComplete = false;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAYlC,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAE1BC,YAAoBC,WAA+B;IAA/B,KAAAA,WAAW,GAAXA,WAAW;IAe/B,KAAAC,UAAU,GAAW,EAAE;IACvB,KAAAC,gBAAgB,GAAa,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IACxD,KAAAC,gBAAgB,GAAY,KAAK;EAjBoB;EAErDC,iBAAiBA,CAAA;IACfC,OAAO,CAACC,GAAG,CAACC,cAAc,EAAE,CAAC;IAC7B,OAAOA,cAAc,EAAE;EACzB;EAEAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACR,WAAW,CAACQ,eAAe,EAAE;EAC3C;EACAC,QAAQA,CAAA;IACNJ,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,IAAI,CAACN,WAAW,CAACU,MAAM,EAAE;EAC3B;EAMAC,OAAOA,CAAA;IACL;IACA,IAAI,CAACT,gBAAgB,GAAG,IAAI,CAACU,sBAAsB,CAAC,IAAI,CAACX,UAAU,CAAC;IAEpE;IACA,IAAI,CAACE,gBAAgB,GAAG,IAAI,CAACD,gBAAgB,CAACW,MAAM,GAAG,CAAC;EAC1D;EAEAD,sBAAsBA,CAACE,IAAY;IACjC;IACA;IACA;IACA,OAAO,IAAI,CAACZ,gBAAgB,CAACa,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACJ,IAAI,CAACG,WAAW,EAAE,CAAC,CAAC;EAC9F;EAEAE,UAAUA,CAACH,IAAY;IACrB,IAAI,CAACf,UAAU,GAAGe,IAAI;IACtB,IAAI,CAACb,gBAAgB,GAAG,KAAK;EAC/B;EAEAiB,MAAMA,CAAA;IACJ;IACA,IAAI,CAAC,IAAI,CAACjB,gBAAgB,EAAE;MAC1B,IAAI,CAACA,gBAAgB,GAAG,KAAK;;EAEjC;CACD;AA/CYL,eAAe,GAAAuB,UAAA,EAP3BxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EAGW1B,eAAe,CA+C3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}