{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ViewChild } from '@angular/core';\nimport { FormControl } from \"@angular/forms\";\nexport class RegistrazioneComponent {\n  constructor(router) {\n    this.router = router;\n    this.nome = new FormControl();\n    this.cognome = new FormControl();\n    this.username = new FormControl();\n    this.email = new FormControl();\n    this.data = new FormControl();\n    this.via = new FormControl();\n    this.civico = new FormControl();\n    this.password1 = new FormControl();\n    this.password = '';\n    this.strength = 0;\n    // Nel tuo componente TypeScript\n    this.formIsValid = false;\n    this.passwordLengthValid = false;\n  }\n  ngOnInit() {\n    this.initAutocomplete();\n  }\n  onPasswordChange() {\n    this.strength = calculateStrength(this.password);\n    this.passwordLengthValid = this.password.length >= 8;\n    console.log(this.formIsValid);\n  }\n  getStrengthColor() {\n    // Restituisci uno stile CSS in base alla forza della password, ad esempio, un gradiente di colore\n    const color = this.strength < 50 ? 'red' : 'green';\n    return {\n      'background': `linear-gradient(to right, ${color} ${this.strength}%, #eee ${this.strength}%)`\n    };\n  }\n  go() {\n    console.log(\"TEST VEDO SE VA GO\");\n    this.router.navigate(['/']);\n  }\n  updateFormValidity() {\n    // Controlla se tutti i campi richiesti sono stati toccati\n    if (this.nome.value == null || this.cognome.value == null || this.username.value == null || this.email.value == null || this.data.value == null || this.via.value == null || this.civico.value == null) {\n      this.formIsValid = false;\n    } else if (this.nome.value == \"\" || this.cognome.value == \"\" || this.username.value == \"\" || this.email.value == \"\" || this.data.value == \"\" || this.via.value == \"\" || this.civico.value == \"\") {\n      this.formIsValid = false;\n    } else {\n      this.formIsValid = true;\n    }\n    console.log(this.formIsValid);\n  }\n  initAutocomplete() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.addressInput.nativeElement, {\n      componentRestrictions: {\n        country: ['us', 'ca']\n      },\n      fields: ['address_components', 'geometry'],\n      types: ['address']\n    });\n    this.autocomplete.addListener('place_changed', this.fillInAddress.bind(this));\n  }\n  fillInAddress() {\n    const place = this.autocomplete.getPlace();\n    // Usa place.address_components per popolare i campi del form con le informazioni dell'indirizzo selezionato\n    // Ad esempio:\n    this.via.setValue(place.name || '');\n    this.civico.setValue(place.address_components.find(component => component.types.includes('street_number'))?.long_name || '');\n    // ... altri campi che desideri popolare\n    this.updateFormValidity();\n  }\n  change() {\n    this.updateFormValidity();\n  }\n}\n__decorate([ViewChild('registrationForm', {\n  static: false\n})], RegistrazioneComponent.prototype, \"registrationForm\", void 0);\n__decorate([ViewChild('indirizzo')], RegistrazioneComponent.prototype, \"addressInput\", void 0);","map":{"version":3,"names":["ViewChild","FormControl","RegistrazioneComponent","constructor","router","nome","cognome","username","email","data","via","civico","password1","password","strength","formIsValid","passwordLengthValid","ngOnInit","initAutocomplete","onPasswordChange","calculateStrength","length","console","log","getStrengthColor","color","go","navigate","updateFormValidity","value","autocomplete","google","maps","places","Autocomplete","addressInput","nativeElement","componentRestrictions","country","fields","types","addListener","fillInAddress","bind","place","getPlace","setValue","name","address_components","find","component","includes","long_name","change","__decorate","static"],"sources":["D:\\codici\\ProgettoWebFrontEnd\\src\\app\\registrazione\\registrazione.component.ts"],"sourcesContent":["import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {FormControl, NgForm} from \"@angular/forms\";\nimport {Router} from \"@angular/router\";\ndeclare const calculateStrength: (password: string) => number; // Importa la funzione dalla logica JavaScript\n\n@Component({\n  selector: 'app-registrazione',\n  templateUrl: './registrazione.component.html',\n  styleUrls: ['./registrazione.component.css']\n})\n\ndeclare const google: any;\nexport class RegistrazioneComponent {\n\n\n\n  @ViewChild('registrationForm', { static: false }) registrationForm!: NgForm; // Aggiunta l'inizializzazione\n\n\n  @ViewChild('indirizzo') addressInput: ElementRef | undefined;\n\n  nome = new FormControl();\n  cognome = new FormControl();\n  username = new FormControl();\n\n  email = new FormControl();\n  data = new FormControl();\n  via = new FormControl();\n  civico = new FormControl();\n  password1 = new FormControl();\n\n  password: string = '';\n  strength: number = 0;\n\n  // Nel tuo componente TypeScript\n  formIsValid = false;\n\n\n\n  passwordLengthValid = false;\n\n  constructor(private router: Router) {}\n\n  autocomplete: any;\n\n  ngOnInit() {\n    this.initAutocomplete();\n  }\n\n\n\n  onPasswordChange() {\n    this.strength = calculateStrength(this.password);\n    this.passwordLengthValid = this.password.length >= 8;\n    console.log(this.formIsValid)\n  }\n\n  getStrengthColor() {\n    // Restituisci uno stile CSS in base alla forza della password, ad esempio, un gradiente di colore\n    const color = this.strength < 50 ? 'red' : 'green';\n    return { 'background': `linear-gradient(to right, ${color} ${this.strength}%, #eee ${this.strength}%)` };\n  }\n\n  go(){\n    console.log(\"TEST VEDO SE VA GO\");\n    this.router.navigate(['/']);\n\n  }\n\n  updateFormValidity() {\n    // Controlla se tutti i campi richiesti sono stati toccati\n    if(this.nome.value == null || this.cognome.value == null || this.username.value == null || this.email.value == null || this.data.value == null || this.via.value == null || this.civico.value == null ){\n      this.formIsValid = false;\n    }\n\n    else if (this.nome.value == \"\" || this.cognome.value == \"\" || this.username.value == \"\" || this.email.value == \"\" || this.data.value == \"\" || this.via.value == \"\" || this.civico.value == \"\" ){\n      this.formIsValid = false;\n    }\n\n    else {\n      this.formIsValid = true;\n    }\n    console.log(this.formIsValid);\n  }\n\n  initAutocomplete() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.addressInput.nativeElement, {\n      componentRestrictions: { country: ['us', 'ca'] },\n      fields: ['address_components', 'geometry'],\n      types: ['address'],\n    });\n\n    this.autocomplete.addListener('place_changed', this.fillInAddress.bind(this));\n  }\n\n  fillInAddress() {\n    const place = this.autocomplete.getPlace();\n\n    // Usa place.address_components per popolare i campi del form con le informazioni dell'indirizzo selezionato\n    // Ad esempio:\n    this.via.setValue(place.name || '');\n    this.civico.setValue(place.address_components.find(component => component.types.includes('street_number'))?.long_name || '');\n    // ... altri campi che desideri popolare\n\n    this.updateFormValidity();\n  }\n\n  change() {\n    this.updateFormValidity();\n\n  }\n\n\n\n\n\n\n\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}